{"ast":null,"code":"/**\n * 数据分析服务\n * 处理水质数据和鱼类数据的加载、分析和处理\n */\n\nimport axios from 'axios';\n\n// 基础路径配置\nconst DATA_BASE_PATH = '/软件工程大作业数据';\n\n/**\n * 加载水质数据\n * @param {string} year - 年份，如 '2020'\n * @param {string} month - 月份，如 '05'\n * @param {string} day - 日期，如 '08'\n * @returns {Promise} - 返回水质数据\n */\nexport const loadWaterQualityData = async (year = '2020', month = '05', day = '08') => {\n  try {\n    const response = await axios.get(`${DATA_BASE_PATH}/水质数据/${year}-${month}/${year}-${month}-${day}.json`);\n    return response.data;\n  } catch (error) {\n    console.error('加载水质数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 加载指定月份的水质数据\n * @param {string} year - 年份，如 '2020'\n * @param {string} month - 月份，如 '05'\n * @returns {Promise} - 返回该月的水质数据汇总\n */\nexport const loadMonthlyWaterQualityData = async (year = '2020', month = '05') => {\n  try {\n    // 这里应该是一个API调用，获取整月的数据\n    // 由于我们没有实际的API，这里模拟返回数据\n    return generateMonthlyWaterQualityData(year, month);\n  } catch (error) {\n    console.error('加载月度水质数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 加载鱼类数据\n * @returns {Promise} - 返回鱼类数据\n */\nexport const loadFishData = async () => {\n  try {\n    const response = await axios.get(`${DATA_BASE_PATH}/Fish.csv`, {\n      responseType: 'text'\n    });\n    return parseCsvData(response.data);\n  } catch (error) {\n    console.error('加载鱼类数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 解析CSV数据\n * @param {string} csvText - CSV文本数据\n * @returns {Array} - 解析后的数据数组\n */\nexport const parseCsvData = csvText => {\n  const lines = csvText.split('\\n');\n  const headers = lines[0].split(',');\n  return lines.slice(1).filter(line => line.trim()).map(line => {\n    const values = line.split(',');\n    const obj = {};\n    headers.forEach((header, index) => {\n      obj[header] = values[index];\n    });\n    return obj;\n  });\n};\n\n/**\n * 分析水质数据，计算各项指标的平均值、达标率和水质等级\n * @param {Object} waterData - 水质数据对象\n * @returns {Object} - 水质分析结果\n */\n// 重命名函数以避免重复声明\nexport const analyzeWaterQualityData = waterData => {\n  if (!waterData) return null;\n\n  // 计算各参数平均值\n  const calculateAverage = data => {\n    const validData = data.filter(value => value !== null && !isNaN(value));\n    return validData.length > 0 ? +(validData.reduce((sum, value) => sum + value, 0) / validData.length).toFixed(2) : 0;\n  };\n\n  // 计算达标率\n  const calculateComplianceRate = (data, standardMin, standardMax) => {\n    const validData = data.filter(value => value !== null && !isNaN(value));\n    if (validData.length === 0) return '0%';\n    const compliantCount = validData.filter(value => value >= standardMin && value <= standardMax).length;\n    return `${(compliantCount / validData.length * 100).toFixed(1)}%`;\n  };\n\n  // 计算水质等级\n  const determineWaterQualityLevel = averages => {\n    const {\n      ph,\n      oxygen,\n      permanganate,\n      ammonia,\n      phosphorus\n    } = averages;\n    if (ph >= 6.5 && ph <= 8.5 && oxygen >= 7.5 && permanganate <= 2 && ammonia <= 0.15 && phosphorus <= 0.02) {\n      return {\n        level: 'I',\n        description: '水质优，适合各种用途'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 6 && permanganate <= 4 && ammonia <= 0.5 && phosphorus <= 0.1) {\n      return {\n        level: 'II',\n        description: '水质良好，适合饮用水源及珍稀水生生物栖息'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 5 && permanganate <= 6 && ammonia <= 1.0 && phosphorus <= 0.2) {\n      return {\n        level: 'III',\n        description: '水质一般，适合一般鱼类栖息及游泳'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 3 && permanganate <= 10 && ammonia <= 1.5 && phosphorus <= 0.3) {\n      return {\n        level: 'IV',\n        description: '水质较差，适合一般工业用水'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 2 && permanganate <= 15 && ammonia <= 2.0 && phosphorus <= 0.4) {\n      return {\n        level: 'V',\n        description: '水质差，仅适合农业用水及一般景观用水'\n      };\n    } else {\n      return {\n        level: '劣V',\n        description: '水质极差，不适合常规用途'\n      };\n    }\n  };\n\n  // 计算平均值\n  const averages = {\n    temperature: calculateAverage(waterData.temperature),\n    ph: calculateAverage(waterData.ph),\n    oxygen: calculateAverage(waterData.oxygen),\n    conductivity: calculateAverage(waterData.conductivity),\n    turbidity: calculateAverage(waterData.turbidity),\n    permanganate: calculateAverage(waterData.permanganate),\n    ammonia: calculateAverage(waterData.ammonia),\n    phosphorus: calculateAverage(waterData.phosphorus),\n    nitrogen: calculateAverage(waterData.nitrogen)\n  };\n\n  // 计算达标率\n  const complianceRates = {\n    ph: calculateComplianceRate(waterData.ph, 6.5, 8.5),\n    oxygen: calculateComplianceRate(waterData.oxygen, 5, 20),\n    permanganate: calculateComplianceRate(waterData.permanganate, 0, 6),\n    ammonia: calculateComplianceRate(waterData.ammonia, 0, 1.0),\n    phosphorus: calculateComplianceRate(waterData.phosphorus, 0, 0.2)\n  };\n\n  // 确定水质等级\n  const qualityLevel = determineWaterQualityLevel(averages);\n  return {\n    averages,\n    complianceRates,\n    qualityLevel\n  };\n};\n\n/**\n * 生成月度水质数据（模拟数据）\n * @param {string} year - 年份\n * @param {string} month - 月份\n * @returns {Object} - 月度水质数据\n */\nconst generateMonthlyWaterQualityData = (year, month) => {\n  // 生成该月的天数\n  const daysInMonth = new Date(parseInt(year), parseInt(month), 0).getDate();\n  const days = Array.from({\n    length: daysInMonth\n  }, (_, i) => i + 1).map(day => `${day}日`);\n\n  // 生成水质参数数据\n  const generateParameterData = (baseValue, fluctuation) => {\n    return Array.from({\n      length: daysInMonth\n    }, () => {\n      return +(baseValue + (Math.random() * 2 - 1) * fluctuation).toFixed(2);\n    });\n  };\n  return {\n    days,\n    temperature: generateParameterData(24, 3),\n    // 水温，基准24℃，波动±3℃\n    ph: generateParameterData(7.2, 0.5),\n    // pH值，基准7.2，波动±0.5\n    oxygen: generateParameterData(6.5, 1),\n    // 溶解氧，基准6.5mg/L，波动±1mg/L\n    conductivity: generateParameterData(300, 50),\n    // 电导率，基准300μS/cm，波动±50μS/cm\n    turbidity: generateParameterData(15, 5),\n    // 浊度，基准15NTU，波动±5NTU\n    permanganate: generateParameterData(4, 1),\n    // 高锰酸盐指数，基准4mg/L，波动±1mg/L\n    ammonia: generateParameterData(0.5, 0.2),\n    // 氨氮，基准0.5mg/L，波动±0.2mg/L\n    phosphorus: generateParameterData(0.2, 0.1),\n    // 总磷，基准0.2mg/L，波动±0.1mg/L\n    nitrogen: generateParameterData(1.5, 0.5) // 总氮，基准1.5mg/L，波动±0.5mg/L\n  };\n};\n\n/**\n * 分析水质数据，评估水质等级\n * @param {Object} waterData - 水质数据\n * @returns {Object} - 水质评估结果\n */\nexport const analyzeWaterQuality = waterData => {\n  if (!waterData) return null;\n\n  // 根据《地表水环境质量标准(GB3838-2002)》评估水质等级\n  // 这里简化处理，仅根据几个关键指标进行评估\n  const getWaterQualityLevel = (ph, oxygen, permanganate, ammonia, phosphorus) => {\n    // 简化的水质评估逻辑\n    if (ph >= 6.5 && ph <= 8.5 && oxygen >= 6 && permanganate <= 4 && ammonia <= 0.5 && phosphorus <= 0.1) {\n      return {\n        level: 'I',\n        description: '优',\n        color: '#52c41a'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 5 && permanganate <= 6 && ammonia <= 1.0 && phosphorus <= 0.2) {\n      return {\n        level: 'II',\n        description: '良',\n        color: '#91d5ff'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 4 && permanganate <= 8 && ammonia <= 1.5 && phosphorus <= 0.3) {\n      return {\n        level: 'III',\n        description: '轻度污染',\n        color: '#fadb14'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 3 && permanganate <= 10 && ammonia <= 2.0 && phosphorus <= 0.4) {\n      return {\n        level: 'IV',\n        description: '中度污染',\n        color: '#fa8c16'\n      };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 2 && permanganate <= 15 && ammonia <= 3.0 && phosphorus <= 0.5) {\n      return {\n        level: 'V',\n        description: '重度污染',\n        color: '#f5222d'\n      };\n    } else {\n      return {\n        level: '劣V',\n        description: '严重污染',\n        color: '#722ed1'\n      };\n    }\n  };\n\n  // 计算平均值\n  const calculateAverage = data => {\n    if (!Array.isArray(data)) return data;\n    return data.reduce((sum, value) => sum + value, 0) / data.length;\n  };\n  const avgPh = calculateAverage(waterData.ph);\n  const avgOxygen = calculateAverage(waterData.oxygen);\n  const avgPermanganate = calculateAverage(waterData.permanganate);\n  const avgAmmonia = calculateAverage(waterData.ammonia);\n  const avgPhosphorus = calculateAverage(waterData.phosphorus);\n  const qualityLevel = getWaterQualityLevel(avgPh, avgOxygen, avgPermanganate, avgAmmonia, avgPhosphorus);\n\n  // 计算各项指标的达标率\n  const calculateComplianceRate = (data, standardValue, isLowerBetter = true) => {\n    if (!Array.isArray(data)) return 0;\n    const compliantCount = data.filter(value => isLowerBetter ? value <= standardValue : value >= standardValue).length;\n    return (compliantCount / data.length * 100).toFixed(1);\n  };\n  return {\n    qualityLevel,\n    averages: {\n      ph: avgPh.toFixed(1),\n      oxygen: avgOxygen.toFixed(1),\n      permanganate: avgPermanganate.toFixed(1),\n      ammonia: avgAmmonia.toFixed(2),\n      phosphorus: avgPhosphorus.toFixed(2),\n      nitrogen: calculateAverage(waterData.nitrogen).toFixed(2),\n      temperature: calculateAverage(waterData.temperature).toFixed(1),\n      conductivity: calculateAverage(waterData.conductivity).toFixed(0),\n      turbidity: calculateAverage(waterData.turbidity).toFixed(1)\n    },\n    complianceRates: {\n      ph: calculateComplianceRate(waterData.ph, 8.5, false) + '%',\n      oxygen: calculateComplianceRate(waterData.oxygen, 5, false) + '%',\n      permanganate: calculateComplianceRate(waterData.permanganate, 6) + '%',\n      ammonia: calculateComplianceRate(waterData.ammonia, 1.0) + '%',\n      phosphorus: calculateComplianceRate(waterData.phosphorus, 0.2) + '%'\n    }\n  };\n};\n\n/**\n * 分析鱼类数据\n * @param {Array} fishData - 鱼类数据数组\n * @returns {Object} - 鱼类分析结果\n */\nexport const analyzeFishData = fishData => {\n  if (!fishData || !Array.isArray(fishData) || fishData.length === 0) {\n    return null;\n  }\n\n  // 按鱼类种类分组\n  const speciesGroups = {};\n  fishData.forEach(fish => {\n    const species = fish.Species;\n    if (!speciesGroups[species]) {\n      speciesGroups[species] = [];\n    }\n    speciesGroups[species].push(fish);\n  });\n\n  // 计算每种鱼的平均体重和体长\n  const speciesStats = Object.keys(speciesGroups).map(species => {\n    const fishes = speciesGroups[species];\n    const avgWeight = fishes.reduce((sum, fish) => sum + parseFloat(fish['Weight(g)']), 0) / fishes.length;\n    const avgLength = fishes.reduce((sum, fish) => sum + parseFloat(fish['Length3(cm)']), 0) / fishes.length;\n    const count = fishes.length;\n    return {\n      species,\n      count,\n      avgWeight: avgWeight.toFixed(1),\n      avgLength: avgLength.toFixed(1)\n    };\n  });\n\n  // 计算总体统计信息\n  const totalCount = fishData.length;\n  const speciesCount = Object.keys(speciesGroups).length;\n  const totalWeight = fishData.reduce((sum, fish) => sum + parseFloat(fish['Weight(g)']), 0);\n  const avgWeight = (totalWeight / totalCount).toFixed(1);\n  return {\n    speciesStats,\n    totalStats: {\n      totalCount,\n      speciesCount,\n      totalWeight: totalWeight.toFixed(1),\n      avgWeight\n    }\n  };\n};\n\n/**\n * 生成水质趋势报告\n * @param {Object} waterData - 水质数据\n * @returns {Object} - 趋势报告\n */\nexport const generateWaterQualityTrendReport = waterData => {\n  if (!waterData) return null;\n\n  // 计算趋势（简单线性回归）\n  const calculateTrend = data => {\n    if (!Array.isArray(data) || data.length < 2) return 0;\n    const n = data.length;\n    const indices = Array.from({\n      length: n\n    }, (_, i) => i);\n    const sumX = indices.reduce((sum, x) => sum + x, 0);\n    const sumY = data.reduce((sum, y) => sum + y, 0);\n    const sumXY = indices.reduce((sum, x, i) => sum + x * data[i], 0);\n    const sumXX = indices.reduce((sum, x) => sum + x * x, 0);\n\n    // 计算斜率\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    return slope;\n  };\n\n  // 判断趋势方向和强度\n  const getTrendDescription = slope => {\n    const absSlope = Math.abs(slope);\n    let direction = '';\n    let strength = '';\n    if (slope > 0) {\n      direction = '上升';\n    } else if (slope < 0) {\n      direction = '下降';\n    } else {\n      direction = '稳定';\n    }\n    if (absSlope > 0.1) {\n      strength = '显著';\n    } else if (absSlope > 0.05) {\n      strength = '中等';\n    } else if (absSlope > 0.01) {\n      strength = '轻微';\n    } else {\n      strength = '几乎无变化';\n    }\n    return {\n      direction,\n      strength,\n      description: strength + direction\n    };\n  };\n  return {\n    temperature: getTrendDescription(calculateTrend(waterData.temperature)),\n    ph: getTrendDescription(calculateTrend(waterData.ph)),\n    oxygen: getTrendDescription(calculateTrend(waterData.oxygen)),\n    conductivity: getTrendDescription(calculateTrend(waterData.conductivity)),\n    turbidity: getTrendDescription(calculateTrend(waterData.turbidity)),\n    permanganate: getTrendDescription(calculateTrend(waterData.permanganate)),\n    ammonia: getTrendDescription(calculateTrend(waterData.ammonia)),\n    phosphorus: getTrendDescription(calculateTrend(waterData.phosphorus)),\n    nitrogen: getTrendDescription(calculateTrend(waterData.nitrogen))\n  };\n};\n\n/**\n * 生成水质异常报告\n * @param {Object} waterData - 水质数据\n * @returns {Array} - 异常报告\n */\nexport const generateWaterQualityAnomalyReport = waterData => {\n  if (!waterData || !waterData.days) return [];\n  const anomalies = [];\n\n  // 定义各参数的正常范围\n  const normalRanges = {\n    temperature: {\n      min: 18,\n      max: 30,\n      name: '水温',\n      unit: '°C'\n    },\n    ph: {\n      min: 6.5,\n      max: 8.5,\n      name: 'pH值',\n      unit: ''\n    },\n    oxygen: {\n      min: 5,\n      max: 20,\n      name: '溶解氧',\n      unit: 'mg/L'\n    },\n    conductivity: {\n      min: 200,\n      max: 500,\n      name: '电导率',\n      unit: 'μS/cm'\n    },\n    turbidity: {\n      min: 0,\n      max: 20,\n      name: '浊度',\n      unit: 'NTU'\n    },\n    permanganate: {\n      min: 0,\n      max: 6,\n      name: '高锰酸盐指数',\n      unit: 'mg/L'\n    },\n    ammonia: {\n      min: 0,\n      max: 1.0,\n      name: '氨氮',\n      unit: 'mg/L'\n    },\n    phosphorus: {\n      min: 0,\n      max: 0.2,\n      name: '总磷',\n      unit: 'mg/L'\n    },\n    nitrogen: {\n      min: 0,\n      max: 2.0,\n      name: '总氮',\n      unit: 'mg/L'\n    }\n  };\n\n  // 检查每个参数的每一天是否有异常\n  Object.keys(normalRanges).forEach(param => {\n    if (!waterData[param] || !Array.isArray(waterData[param])) return;\n    const {\n      min,\n      max,\n      name,\n      unit\n    } = normalRanges[param];\n    waterData[param].forEach((value, index) => {\n      if (value < min || value > max) {\n        anomalies.push({\n          day: waterData.days[index],\n          parameter: name,\n          value: `${value}${unit}`,\n          normalRange: `${min}-${max}${unit}`,\n          severity: value < min ? '过低' : '过高',\n          impact: getAnomalyImpact(param, value < min)\n        });\n      }\n    });\n  });\n  return anomalies;\n};\n\n/**\n * 获取异常影响描述\n * @param {string} parameter - 参数名称\n * @param {boolean} isLow - 是否过低\n * @returns {string} - 影响描述\n */\nconst getAnomalyImpact = (parameter, isLow) => {\n  const impacts = {\n    temperature: {\n      low: '鱼类生长缓慢，免疫力下降',\n      high: '鱼类代谢加快，耗氧量增加，可能导致缺氧'\n    },\n    ph: {\n      low: '水体酸化，影响鱼类生理功能',\n      high: '水体碱化，可能导致氨毒性增加'\n    },\n    oxygen: {\n      low: '鱼类缺氧，严重时可能导致死亡',\n      high: '通常无负面影响'\n    },\n    conductivity: {\n      low: '水中溶解盐类较少',\n      high: '水中溶解盐类过多，可能影响鱼类渗透压调节'\n    },\n    turbidity: {\n      low: '通常无负面影响',\n      high: '影响光照透射，降低水中溶解氧，影响鱼类呼吸'\n    },\n    permanganate: {\n      low: '通常无负面影响',\n      high: '有机物污染严重，可能导致水质恶化'\n    },\n    ammonia: {\n      low: '通常无负面影响',\n      high: '氨毒性增加，影响鱼类呼吸和生长'\n    },\n    phosphorus: {\n      low: '通常无负面影响',\n      high: '可能导致水体富营养化，引发藻类过度繁殖'\n    },\n    nitrogen: {\n      low: '通常无负面影响',\n      high: '可能导致水体富营养化，影响水质'\n    }\n  };\n  return impacts[parameter] ? isLow ? impacts[parameter].low : impacts[parameter].high : '未知影响';\n};\nconst dataService = {\n  loadWaterQualityData,\n  loadMonthlyWaterQualityData,\n  loadFishData,\n  analyzeWaterQuality,\n  analyzeFishData,\n  generateWaterQualityTrendReport,\n  generateWaterQualityAnomalyReport\n};\nexport default dataService;","map":{"version":3,"names":["axios","DATA_BASE_PATH","loadWaterQualityData","year","month","day","response","get","data","error","console","loadMonthlyWaterQualityData","generateMonthlyWaterQualityData","loadFishData","responseType","parseCsvData","csvText","lines","split","headers","slice","filter","line","trim","map","values","obj","forEach","header","index","analyzeWaterQualityData","waterData","calculateAverage","validData","value","isNaN","length","reduce","sum","toFixed","calculateComplianceRate","standardMin","standardMax","compliantCount","determineWaterQualityLevel","averages","ph","oxygen","permanganate","ammonia","phosphorus","level","description","temperature","conductivity","turbidity","nitrogen","complianceRates","qualityLevel","daysInMonth","Date","parseInt","getDate","days","Array","from","_","i","generateParameterData","baseValue","fluctuation","Math","random","analyzeWaterQuality","getWaterQualityLevel","color","isArray","avgPh","avgOxygen","avgPermanganate","avgAmmonia","avgPhosphorus","standardValue","isLowerBetter","analyzeFishData","fishData","speciesGroups","fish","species","Species","push","speciesStats","Object","keys","fishes","avgWeight","parseFloat","avgLength","count","totalCount","speciesCount","totalWeight","totalStats","generateWaterQualityTrendReport","calculateTrend","n","indices","sumX","x","sumY","y","sumXY","sumXX","slope","getTrendDescription","absSlope","abs","direction","strength","generateWaterQualityAnomalyReport","anomalies","normalRanges","min","max","name","unit","param","parameter","normalRange","severity","impact","getAnomalyImpact","isLow","impacts","low","high","dataService"],"sources":["D:/文雅竹/作业/大三下/软件工程/NKU_Software/frontend/src/services/dataService.js"],"sourcesContent":["/**\n * 数据分析服务\n * 处理水质数据和鱼类数据的加载、分析和处理\n */\n\nimport axios from 'axios';\n\n// 基础路径配置\nconst DATA_BASE_PATH = '/软件工程大作业数据';\n\n/**\n * 加载水质数据\n * @param {string} year - 年份，如 '2020'\n * @param {string} month - 月份，如 '05'\n * @param {string} day - 日期，如 '08'\n * @returns {Promise} - 返回水质数据\n */\nexport const loadWaterQualityData = async (year = '2020', month = '05', day = '08') => {\n  try {\n    const response = await axios.get(`${DATA_BASE_PATH}/水质数据/${year}-${month}/${year}-${month}-${day}.json`);\n    return response.data;\n  } catch (error) {\n    console.error('加载水质数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 加载指定月份的水质数据\n * @param {string} year - 年份，如 '2020'\n * @param {string} month - 月份，如 '05'\n * @returns {Promise} - 返回该月的水质数据汇总\n */\nexport const loadMonthlyWaterQualityData = async (year = '2020', month = '05') => {\n  try {\n    // 这里应该是一个API调用，获取整月的数据\n    // 由于我们没有实际的API，这里模拟返回数据\n    return generateMonthlyWaterQualityData(year, month);\n  } catch (error) {\n    console.error('加载月度水质数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 加载鱼类数据\n * @returns {Promise} - 返回鱼类数据\n */\nexport const loadFishData = async () => {\n  try {\n    const response = await axios.get(`${DATA_BASE_PATH}/Fish.csv`, { responseType: 'text' });\n    return parseCsvData(response.data);\n  } catch (error) {\n    console.error('加载鱼类数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 解析CSV数据\n * @param {string} csvText - CSV文本数据\n * @returns {Array} - 解析后的数据数组\n */\nexport const parseCsvData = (csvText) => {\n  const lines = csvText.split('\\n');\n  const headers = lines[0].split(',');\n  \n  return lines.slice(1).filter(line => line.trim()).map(line => {\n    const values = line.split(',');\n    const obj = {};\n    \n    headers.forEach((header, index) => {\n      obj[header] = values[index];\n    });\n    \n    return obj;\n  });\n};\n\n/**\n * 分析水质数据，计算各项指标的平均值、达标率和水质等级\n * @param {Object} waterData - 水质数据对象\n * @returns {Object} - 水质分析结果\n */\n// 重命名函数以避免重复声明\nexport const analyzeWaterQualityData = (waterData) => {\n  if (!waterData) return null;\n  \n  // 计算各参数平均值\n  const calculateAverage = (data) => {\n    const validData = data.filter(value => value !== null && !isNaN(value));\n    return validData.length > 0 ? \n      +(validData.reduce((sum, value) => sum + value, 0) / validData.length).toFixed(2) : 0;\n  };\n  \n  // 计算达标率\n  const calculateComplianceRate = (data, standardMin, standardMax) => {\n    const validData = data.filter(value => value !== null && !isNaN(value));\n    if (validData.length === 0) return '0%';\n    \n    const compliantCount = validData.filter(value => \n      value >= standardMin && value <= standardMax\n    ).length;\n    \n    return `${((compliantCount / validData.length) * 100).toFixed(1)}%`;\n  };\n  \n  // 计算水质等级\n  const determineWaterQualityLevel = (averages) => {\n    const { ph, oxygen, permanganate, ammonia, phosphorus } = averages;\n    \n    if (ph >= 6.5 && ph <= 8.5 && oxygen >= 7.5 && permanganate <= 2 && ammonia <= 0.15 && phosphorus <= 0.02) {\n      return { level: 'I', description: '水质优，适合各种用途' };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 6 && permanganate <= 4 && ammonia <= 0.5 && phosphorus <= 0.1) {\n      return { level: 'II', description: '水质良好，适合饮用水源及珍稀水生生物栖息' };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 5 && permanganate <= 6 && ammonia <= 1.0 && phosphorus <= 0.2) {\n      return { level: 'III', description: '水质一般，适合一般鱼类栖息及游泳' };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 3 && permanganate <= 10 && ammonia <= 1.5 && phosphorus <= 0.3) {\n      return { level: 'IV', description: '水质较差，适合一般工业用水' };\n    } else if (ph >= 6 && ph <= 9 && oxygen >= 2 && permanganate <= 15 && ammonia <= 2.0 && phosphorus <= 0.4) {\n      return { level: 'V', description: '水质差，仅适合农业用水及一般景观用水' };\n    } else {\n      return { level: '劣V', description: '水质极差，不适合常规用途' };\n    }\n  };\n  \n  // 计算平均值\n  const averages = {\n    temperature: calculateAverage(waterData.temperature),\n    ph: calculateAverage(waterData.ph),\n    oxygen: calculateAverage(waterData.oxygen),\n    conductivity: calculateAverage(waterData.conductivity),\n    turbidity: calculateAverage(waterData.turbidity),\n    permanganate: calculateAverage(waterData.permanganate),\n    ammonia: calculateAverage(waterData.ammonia),\n    phosphorus: calculateAverage(waterData.phosphorus),\n    nitrogen: calculateAverage(waterData.nitrogen)\n  };\n  \n  // 计算达标率\n  const complianceRates = {\n    ph: calculateComplianceRate(waterData.ph, 6.5, 8.5),\n    oxygen: calculateComplianceRate(waterData.oxygen, 5, 20),\n    permanganate: calculateComplianceRate(waterData.permanganate, 0, 6),\n    ammonia: calculateComplianceRate(waterData.ammonia, 0, 1.0),\n    phosphorus: calculateComplianceRate(waterData.phosphorus, 0, 0.2)\n  };\n  \n  // 确定水质等级\n  const qualityLevel = determineWaterQualityLevel(averages);\n  \n  return {\n    averages,\n    complianceRates,\n    qualityLevel\n  };\n};\n\n/**\n * 生成月度水质数据（模拟数据）\n * @param {string} year - 年份\n * @param {string} month - 月份\n * @returns {Object} - 月度水质数据\n */\nconst generateMonthlyWaterQualityData = (year, month) => {\n  // 生成该月的天数\n  const daysInMonth = new Date(parseInt(year), parseInt(month), 0).getDate();\n  const days = Array.from({ length: daysInMonth }, (_, i) => i + 1).map(day => `${day}日`);\n  \n  // 生成水质参数数据\n  const generateParameterData = (baseValue, fluctuation) => {\n    return Array.from({ length: daysInMonth }, () => {\n      return +(baseValue + (Math.random() * 2 - 1) * fluctuation).toFixed(2);\n    });\n  };\n  \n  return {\n    days,\n    temperature: generateParameterData(24, 3),       // 水温，基准24℃，波动±3℃\n    ph: generateParameterData(7.2, 0.5),            // pH值，基准7.2，波动±0.5\n    oxygen: generateParameterData(6.5, 1),          // 溶解氧，基准6.5mg/L，波动±1mg/L\n    conductivity: generateParameterData(300, 50),    // 电导率，基准300μS/cm，波动±50μS/cm\n    turbidity: generateParameterData(15, 5),         // 浊度，基准15NTU，波动±5NTU\n    permanganate: generateParameterData(4, 1),       // 高锰酸盐指数，基准4mg/L，波动±1mg/L\n    ammonia: generateParameterData(0.5, 0.2),        // 氨氮，基准0.5mg/L，波动±0.2mg/L\n    phosphorus: generateParameterData(0.2, 0.1),     // 总磷，基准0.2mg/L，波动±0.1mg/L\n    nitrogen: generateParameterData(1.5, 0.5)        // 总氮，基准1.5mg/L，波动±0.5mg/L\n  };\n};\n\n/**\n * 分析水质数据，评估水质等级\n * @param {Object} waterData - 水质数据\n * @returns {Object} - 水质评估结果\n */\nexport const analyzeWaterQuality = (waterData) => {\n  if (!waterData) return null;\n  \n  // 根据《地表水环境质量标准(GB3838-2002)》评估水质等级\n  // 这里简化处理，仅根据几个关键指标进行评估\n  const getWaterQualityLevel = (ph, oxygen, permanganate, ammonia, phosphorus) => {\n    // 简化的水质评估逻辑\n    if (ph >= 6.5 && ph <= 8.5 && \n        oxygen >= 6 && \n        permanganate <= 4 && \n        ammonia <= 0.5 && \n        phosphorus <= 0.1) {\n      return { level: 'I', description: '优', color: '#52c41a' };\n    } else if (ph >= 6 && ph <= 9 && \n               oxygen >= 5 && \n               permanganate <= 6 && \n               ammonia <= 1.0 && \n               phosphorus <= 0.2) {\n      return { level: 'II', description: '良', color: '#91d5ff' };\n    } else if (ph >= 6 && ph <= 9 && \n               oxygen >= 4 && \n               permanganate <= 8 && \n               ammonia <= 1.5 && \n               phosphorus <= 0.3) {\n      return { level: 'III', description: '轻度污染', color: '#fadb14' };\n    } else if (ph >= 6 && ph <= 9 && \n               oxygen >= 3 && \n               permanganate <= 10 && \n               ammonia <= 2.0 && \n               phosphorus <= 0.4) {\n      return { level: 'IV', description: '中度污染', color: '#fa8c16' };\n    } else if (ph >= 6 && ph <= 9 && \n               oxygen >= 2 && \n               permanganate <= 15 && \n               ammonia <= 3.0 && \n               phosphorus <= 0.5) {\n      return { level: 'V', description: '重度污染', color: '#f5222d' };\n    } else {\n      return { level: '劣V', description: '严重污染', color: '#722ed1' };\n    }\n  };\n  \n  // 计算平均值\n  const calculateAverage = (data) => {\n    if (!Array.isArray(data)) return data;\n    return data.reduce((sum, value) => sum + value, 0) / data.length;\n  };\n  \n  const avgPh = calculateAverage(waterData.ph);\n  const avgOxygen = calculateAverage(waterData.oxygen);\n  const avgPermanganate = calculateAverage(waterData.permanganate);\n  const avgAmmonia = calculateAverage(waterData.ammonia);\n  const avgPhosphorus = calculateAverage(waterData.phosphorus);\n  \n  const qualityLevel = getWaterQualityLevel(\n    avgPh, avgOxygen, avgPermanganate, avgAmmonia, avgPhosphorus\n  );\n  \n  // 计算各项指标的达标率\n  const calculateComplianceRate = (data, standardValue, isLowerBetter = true) => {\n    if (!Array.isArray(data)) return 0;\n    const compliantCount = data.filter(value => \n      isLowerBetter ? value <= standardValue : value >= standardValue\n    ).length;\n    return (compliantCount / data.length * 100).toFixed(1);\n  };\n  \n  return {\n    qualityLevel,\n    averages: {\n      ph: avgPh.toFixed(1),\n      oxygen: avgOxygen.toFixed(1),\n      permanganate: avgPermanganate.toFixed(1),\n      ammonia: avgAmmonia.toFixed(2),\n      phosphorus: avgPhosphorus.toFixed(2),\n      nitrogen: calculateAverage(waterData.nitrogen).toFixed(2),\n      temperature: calculateAverage(waterData.temperature).toFixed(1),\n      conductivity: calculateAverage(waterData.conductivity).toFixed(0),\n      turbidity: calculateAverage(waterData.turbidity).toFixed(1)\n    },\n    complianceRates: {\n      ph: calculateComplianceRate(waterData.ph, 8.5, false) + '%',\n      oxygen: calculateComplianceRate(waterData.oxygen, 5, false) + '%',\n      permanganate: calculateComplianceRate(waterData.permanganate, 6) + '%',\n      ammonia: calculateComplianceRate(waterData.ammonia, 1.0) + '%',\n      phosphorus: calculateComplianceRate(waterData.phosphorus, 0.2) + '%'\n    }\n  };\n};\n\n/**\n * 分析鱼类数据\n * @param {Array} fishData - 鱼类数据数组\n * @returns {Object} - 鱼类分析结果\n */\nexport const analyzeFishData = (fishData) => {\n  if (!fishData || !Array.isArray(fishData) || fishData.length === 0) {\n    return null;\n  }\n  \n  // 按鱼类种类分组\n  const speciesGroups = {};\n  fishData.forEach(fish => {\n    const species = fish.Species;\n    if (!speciesGroups[species]) {\n      speciesGroups[species] = [];\n    }\n    speciesGroups[species].push(fish);\n  });\n  \n  // 计算每种鱼的平均体重和体长\n  const speciesStats = Object.keys(speciesGroups).map(species => {\n    const fishes = speciesGroups[species];\n    const avgWeight = fishes.reduce((sum, fish) => sum + parseFloat(fish['Weight(g)']), 0) / fishes.length;\n    const avgLength = fishes.reduce((sum, fish) => sum + parseFloat(fish['Length3(cm)']), 0) / fishes.length;\n    const count = fishes.length;\n    \n    return {\n      species,\n      count,\n      avgWeight: avgWeight.toFixed(1),\n      avgLength: avgLength.toFixed(1)\n    };\n  });\n  \n  // 计算总体统计信息\n  const totalCount = fishData.length;\n  const speciesCount = Object.keys(speciesGroups).length;\n  const totalWeight = fishData.reduce((sum, fish) => sum + parseFloat(fish['Weight(g)']), 0);\n  const avgWeight = (totalWeight / totalCount).toFixed(1);\n  \n  return {\n    speciesStats,\n    totalStats: {\n      totalCount,\n      speciesCount,\n      totalWeight: totalWeight.toFixed(1),\n      avgWeight\n    }\n  };\n};\n\n/**\n * 生成水质趋势报告\n * @param {Object} waterData - 水质数据\n * @returns {Object} - 趋势报告\n */\nexport const generateWaterQualityTrendReport = (waterData) => {\n  if (!waterData) return null;\n  \n  // 计算趋势（简单线性回归）\n  const calculateTrend = (data) => {\n    if (!Array.isArray(data) || data.length < 2) return 0;\n    \n    const n = data.length;\n    const indices = Array.from({ length: n }, (_, i) => i);\n    \n    const sumX = indices.reduce((sum, x) => sum + x, 0);\n    const sumY = data.reduce((sum, y) => sum + y, 0);\n    const sumXY = indices.reduce((sum, x, i) => sum + x * data[i], 0);\n    const sumXX = indices.reduce((sum, x) => sum + x * x, 0);\n    \n    // 计算斜率\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    \n    return slope;\n  };\n  \n  // 判断趋势方向和强度\n  const getTrendDescription = (slope) => {\n    const absSlope = Math.abs(slope);\n    let direction = '';\n    let strength = '';\n    \n    if (slope > 0) {\n      direction = '上升';\n    } else if (slope < 0) {\n      direction = '下降';\n    } else {\n      direction = '稳定';\n    }\n    \n    if (absSlope > 0.1) {\n      strength = '显著';\n    } else if (absSlope > 0.05) {\n      strength = '中等';\n    } else if (absSlope > 0.01) {\n      strength = '轻微';\n    } else {\n      strength = '几乎无变化';\n    }\n    \n    return { direction, strength, description: strength + direction };\n  };\n  \n  return {\n    temperature: getTrendDescription(calculateTrend(waterData.temperature)),\n    ph: getTrendDescription(calculateTrend(waterData.ph)),\n    oxygen: getTrendDescription(calculateTrend(waterData.oxygen)),\n    conductivity: getTrendDescription(calculateTrend(waterData.conductivity)),\n    turbidity: getTrendDescription(calculateTrend(waterData.turbidity)),\n    permanganate: getTrendDescription(calculateTrend(waterData.permanganate)),\n    ammonia: getTrendDescription(calculateTrend(waterData.ammonia)),\n    phosphorus: getTrendDescription(calculateTrend(waterData.phosphorus)),\n    nitrogen: getTrendDescription(calculateTrend(waterData.nitrogen))\n  };\n};\n\n/**\n * 生成水质异常报告\n * @param {Object} waterData - 水质数据\n * @returns {Array} - 异常报告\n */\nexport const generateWaterQualityAnomalyReport = (waterData) => {\n  if (!waterData || !waterData.days) return [];\n  \n  const anomalies = [];\n  \n  // 定义各参数的正常范围\n  const normalRanges = {\n    temperature: { min: 18, max: 30, name: '水温', unit: '°C' },\n    ph: { min: 6.5, max: 8.5, name: 'pH值', unit: '' },\n    oxygen: { min: 5, max: 20, name: '溶解氧', unit: 'mg/L' },\n    conductivity: { min: 200, max: 500, name: '电导率', unit: 'μS/cm' },\n    turbidity: { min: 0, max: 20, name: '浊度', unit: 'NTU' },\n    permanganate: { min: 0, max: 6, name: '高锰酸盐指数', unit: 'mg/L' },\n    ammonia: { min: 0, max: 1.0, name: '氨氮', unit: 'mg/L' },\n    phosphorus: { min: 0, max: 0.2, name: '总磷', unit: 'mg/L' },\n    nitrogen: { min: 0, max: 2.0, name: '总氮', unit: 'mg/L' }\n  };\n  \n  // 检查每个参数的每一天是否有异常\n  Object.keys(normalRanges).forEach(param => {\n    if (!waterData[param] || !Array.isArray(waterData[param])) return;\n    \n    const { min, max, name, unit } = normalRanges[param];\n    \n    waterData[param].forEach((value, index) => {\n      if (value < min || value > max) {\n        anomalies.push({\n          day: waterData.days[index],\n          parameter: name,\n          value: `${value}${unit}`,\n          normalRange: `${min}-${max}${unit}`,\n          severity: value < min ? '过低' : '过高',\n          impact: getAnomalyImpact(param, value < min)\n        });\n      }\n    });\n  });\n  \n  return anomalies;\n};\n\n/**\n * 获取异常影响描述\n * @param {string} parameter - 参数名称\n * @param {boolean} isLow - 是否过低\n * @returns {string} - 影响描述\n */\nconst getAnomalyImpact = (parameter, isLow) => {\n  const impacts = {\n    temperature: {\n      low: '鱼类生长缓慢，免疫力下降',\n      high: '鱼类代谢加快，耗氧量增加，可能导致缺氧'\n    },\n    ph: {\n      low: '水体酸化，影响鱼类生理功能',\n      high: '水体碱化，可能导致氨毒性增加'\n    },\n    oxygen: {\n      low: '鱼类缺氧，严重时可能导致死亡',\n      high: '通常无负面影响'\n    },\n    conductivity: {\n      low: '水中溶解盐类较少',\n      high: '水中溶解盐类过多，可能影响鱼类渗透压调节'\n    },\n    turbidity: {\n      low: '通常无负面影响',\n      high: '影响光照透射，降低水中溶解氧，影响鱼类呼吸'\n    },\n    permanganate: {\n      low: '通常无负面影响',\n      high: '有机物污染严重，可能导致水质恶化'\n    },\n    ammonia: {\n      low: '通常无负面影响',\n      high: '氨毒性增加，影响鱼类呼吸和生长'\n    },\n    phosphorus: {\n      low: '通常无负面影响',\n      high: '可能导致水体富营养化，引发藻类过度繁殖'\n    },\n    nitrogen: {\n      low: '通常无负面影响',\n      high: '可能导致水体富营养化，影响水质'\n    }\n  };\n  \n  return impacts[parameter] ? (isLow ? impacts[parameter].low : impacts[parameter].high) : '未知影响';\n};\n\nconst dataService = {\n  loadWaterQualityData,\n  loadMonthlyWaterQualityData,\n  loadFishData,\n  analyzeWaterQuality,\n  analyzeFishData,\n  generateWaterQualityTrendReport,\n  generateWaterQualityAnomalyReport\n};\n\nexport default dataService;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,cAAc,GAAG,YAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,IAAI,GAAG,MAAM,EAAEC,KAAK,GAAG,IAAI,EAAEC,GAAG,GAAG,IAAI,KAAK;EACrF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,cAAc,SAASE,IAAI,IAAIC,KAAK,IAAID,IAAI,IAAIC,KAAK,IAAIC,GAAG,OAAO,CAAC;IACxG,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,2BAA2B,GAAG,MAAAA,CAAOR,IAAI,GAAG,MAAM,EAAEC,KAAK,GAAG,IAAI,KAAK;EAChF,IAAI;IACF;IACA;IACA,OAAOQ,+BAA+B,CAACT,IAAI,EAAEC,KAAK,CAAC;EACrD,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,cAAc,WAAW,EAAE;MAAEa,YAAY,EAAE;IAAO,CAAC,CAAC;IACxF,OAAOC,YAAY,CAACT,QAAQ,CAACE,IAAI,CAAC;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,YAAY,GAAIC,OAAO,IAAK;EACvC,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,IAAI,CAAC;EACjC,MAAMC,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;EAEnC,OAAOD,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAACF,IAAI,IAAI;IAC5D,MAAMG,MAAM,GAAGH,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC;IAC9B,MAAMQ,GAAG,GAAG,CAAC,CAAC;IAEdP,OAAO,CAACQ,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACjCH,GAAG,CAACE,MAAM,CAAC,GAAGH,MAAM,CAACI,KAAK,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAOH,GAAG;EACZ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,uBAAuB,GAAIC,SAAS,IAAK;EACpD,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;;EAE3B;EACA,MAAMC,gBAAgB,GAAIxB,IAAI,IAAK;IACjC,MAAMyB,SAAS,GAAGzB,IAAI,CAACa,MAAM,CAACa,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAAC,CAAC;IACvE,OAAOD,SAAS,CAACG,MAAM,GAAG,CAAC,GACzB,CAAC,CAACH,SAAS,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEJ,KAAK,KAAKI,GAAG,GAAGJ,KAAK,EAAE,CAAC,CAAC,GAAGD,SAAS,CAACG,MAAM,EAAEG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;EACzF,CAAC;;EAED;EACA,MAAMC,uBAAuB,GAAGA,CAAChC,IAAI,EAAEiC,WAAW,EAAEC,WAAW,KAAK;IAClE,MAAMT,SAAS,GAAGzB,IAAI,CAACa,MAAM,CAACa,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACC,KAAK,CAACD,KAAK,CAAC,CAAC;IACvE,IAAID,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAEvC,MAAMO,cAAc,GAAGV,SAAS,CAACZ,MAAM,CAACa,KAAK,IAC3CA,KAAK,IAAIO,WAAW,IAAIP,KAAK,IAAIQ,WACnC,CAAC,CAACN,MAAM;IAER,OAAO,GAAG,CAAEO,cAAc,GAAGV,SAAS,CAACG,MAAM,GAAI,GAAG,EAAEG,OAAO,CAAC,CAAC,CAAC,GAAG;EACrE,CAAC;;EAED;EACA,MAAMK,0BAA0B,GAAIC,QAAQ,IAAK;IAC/C,MAAM;MAAEC,EAAE;MAAEC,MAAM;MAAEC,YAAY;MAAEC,OAAO;MAAEC;IAAW,CAAC,GAAGL,QAAQ;IAElE,IAAIC,EAAE,IAAI,GAAG,IAAIA,EAAE,IAAI,GAAG,IAAIC,MAAM,IAAI,GAAG,IAAIC,YAAY,IAAI,CAAC,IAAIC,OAAO,IAAI,IAAI,IAAIC,UAAU,IAAI,IAAI,EAAE;MACzG,OAAO;QAAEC,KAAK,EAAE,GAAG;QAAEC,WAAW,EAAE;MAAa,CAAC;IAClD,CAAC,MAAM,IAAIN,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIC,YAAY,IAAI,CAAC,IAAIC,OAAO,IAAI,GAAG,IAAIC,UAAU,IAAI,GAAG,EAAE;MACxG,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAuB,CAAC;IAC7D,CAAC,MAAM,IAAIN,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIC,YAAY,IAAI,CAAC,IAAIC,OAAO,IAAI,GAAG,IAAIC,UAAU,IAAI,GAAG,EAAE;MACxG,OAAO;QAAEC,KAAK,EAAE,KAAK;QAAEC,WAAW,EAAE;MAAmB,CAAC;IAC1D,CAAC,MAAM,IAAIN,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIC,YAAY,IAAI,EAAE,IAAIC,OAAO,IAAI,GAAG,IAAIC,UAAU,IAAI,GAAG,EAAE;MACzG,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAgB,CAAC;IACtD,CAAC,MAAM,IAAIN,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIC,YAAY,IAAI,EAAE,IAAIC,OAAO,IAAI,GAAG,IAAIC,UAAU,IAAI,GAAG,EAAE;MACzG,OAAO;QAAEC,KAAK,EAAE,GAAG;QAAEC,WAAW,EAAE;MAAqB,CAAC;IAC1D,CAAC,MAAM;MACL,OAAO;QAAED,KAAK,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAe,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAMP,QAAQ,GAAG;IACfQ,WAAW,EAAErB,gBAAgB,CAACD,SAAS,CAACsB,WAAW,CAAC;IACpDP,EAAE,EAAEd,gBAAgB,CAACD,SAAS,CAACe,EAAE,CAAC;IAClCC,MAAM,EAAEf,gBAAgB,CAACD,SAAS,CAACgB,MAAM,CAAC;IAC1CO,YAAY,EAAEtB,gBAAgB,CAACD,SAAS,CAACuB,YAAY,CAAC;IACtDC,SAAS,EAAEvB,gBAAgB,CAACD,SAAS,CAACwB,SAAS,CAAC;IAChDP,YAAY,EAAEhB,gBAAgB,CAACD,SAAS,CAACiB,YAAY,CAAC;IACtDC,OAAO,EAAEjB,gBAAgB,CAACD,SAAS,CAACkB,OAAO,CAAC;IAC5CC,UAAU,EAAElB,gBAAgB,CAACD,SAAS,CAACmB,UAAU,CAAC;IAClDM,QAAQ,EAAExB,gBAAgB,CAACD,SAAS,CAACyB,QAAQ;EAC/C,CAAC;;EAED;EACA,MAAMC,eAAe,GAAG;IACtBX,EAAE,EAAEN,uBAAuB,CAACT,SAAS,CAACe,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IACnDC,MAAM,EAAEP,uBAAuB,CAACT,SAAS,CAACgB,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;IACxDC,YAAY,EAAER,uBAAuB,CAACT,SAAS,CAACiB,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;IACnEC,OAAO,EAAET,uBAAuB,CAACT,SAAS,CAACkB,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC;IAC3DC,UAAU,EAAEV,uBAAuB,CAACT,SAAS,CAACmB,UAAU,EAAE,CAAC,EAAE,GAAG;EAClE,CAAC;;EAED;EACA,MAAMQ,YAAY,GAAGd,0BAA0B,CAACC,QAAQ,CAAC;EAEzD,OAAO;IACLA,QAAQ;IACRY,eAAe;IACfC;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAM9C,+BAA+B,GAAGA,CAACT,IAAI,EAAEC,KAAK,KAAK;EACvD;EACA,MAAMuD,WAAW,GAAG,IAAIC,IAAI,CAACC,QAAQ,CAAC1D,IAAI,CAAC,EAAE0D,QAAQ,CAACzD,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC0D,OAAO,CAAC,CAAC;EAC1E,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAE7B,MAAM,EAAEuB;EAAY,CAAC,EAAE,CAACO,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC,CAAC3C,GAAG,CAACnB,GAAG,IAAI,GAAGA,GAAG,GAAG,CAAC;;EAEvF;EACA,MAAM+D,qBAAqB,GAAGA,CAACC,SAAS,EAAEC,WAAW,KAAK;IACxD,OAAON,KAAK,CAACC,IAAI,CAAC;MAAE7B,MAAM,EAAEuB;IAAY,CAAC,EAAE,MAAM;MAC/C,OAAO,CAAC,CAACU,SAAS,GAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAIF,WAAW,EAAE/B,OAAO,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLwB,IAAI;IACJV,WAAW,EAAEe,qBAAqB,CAAC,EAAE,EAAE,CAAC,CAAC;IAAQ;IACjDtB,EAAE,EAAEsB,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC;IAAa;IAChDrB,MAAM,EAAEqB,qBAAqB,CAAC,GAAG,EAAE,CAAC,CAAC;IAAW;IAChDd,YAAY,EAAEc,qBAAqB,CAAC,GAAG,EAAE,EAAE,CAAC;IAAK;IACjDb,SAAS,EAAEa,qBAAqB,CAAC,EAAE,EAAE,CAAC,CAAC;IAAU;IACjDpB,YAAY,EAAEoB,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC;IAAQ;IACjDnB,OAAO,EAAEmB,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC;IAAS;IACjDlB,UAAU,EAAEkB,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC;IAAM;IACjDZ,QAAQ,EAAEY,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAQ;EACnD,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,mBAAmB,GAAI1C,SAAS,IAAK;EAChD,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;;EAE3B;EACA;EACA,MAAM2C,oBAAoB,GAAGA,CAAC5B,EAAE,EAAEC,MAAM,EAAEC,YAAY,EAAEC,OAAO,EAAEC,UAAU,KAAK;IAC9E;IACA,IAAIJ,EAAE,IAAI,GAAG,IAAIA,EAAE,IAAI,GAAG,IACtBC,MAAM,IAAI,CAAC,IACXC,YAAY,IAAI,CAAC,IACjBC,OAAO,IAAI,GAAG,IACdC,UAAU,IAAI,GAAG,EAAE;MACrB,OAAO;QAAEC,KAAK,EAAE,GAAG;QAAEC,WAAW,EAAE,GAAG;QAAEuB,KAAK,EAAE;MAAU,CAAC;IAC3D,CAAC,MAAM,IAAI7B,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAClBC,MAAM,IAAI,CAAC,IACXC,YAAY,IAAI,CAAC,IACjBC,OAAO,IAAI,GAAG,IACdC,UAAU,IAAI,GAAG,EAAE;MAC5B,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,WAAW,EAAE,GAAG;QAAEuB,KAAK,EAAE;MAAU,CAAC;IAC5D,CAAC,MAAM,IAAI7B,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAClBC,MAAM,IAAI,CAAC,IACXC,YAAY,IAAI,CAAC,IACjBC,OAAO,IAAI,GAAG,IACdC,UAAU,IAAI,GAAG,EAAE;MAC5B,OAAO;QAAEC,KAAK,EAAE,KAAK;QAAEC,WAAW,EAAE,MAAM;QAAEuB,KAAK,EAAE;MAAU,CAAC;IAChE,CAAC,MAAM,IAAI7B,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAClBC,MAAM,IAAI,CAAC,IACXC,YAAY,IAAI,EAAE,IAClBC,OAAO,IAAI,GAAG,IACdC,UAAU,IAAI,GAAG,EAAE;MAC5B,OAAO;QAAEC,KAAK,EAAE,IAAI;QAAEC,WAAW,EAAE,MAAM;QAAEuB,KAAK,EAAE;MAAU,CAAC;IAC/D,CAAC,MAAM,IAAI7B,EAAE,IAAI,CAAC,IAAIA,EAAE,IAAI,CAAC,IAClBC,MAAM,IAAI,CAAC,IACXC,YAAY,IAAI,EAAE,IAClBC,OAAO,IAAI,GAAG,IACdC,UAAU,IAAI,GAAG,EAAE;MAC5B,OAAO;QAAEC,KAAK,EAAE,GAAG;QAAEC,WAAW,EAAE,MAAM;QAAEuB,KAAK,EAAE;MAAU,CAAC;IAC9D,CAAC,MAAM;MACL,OAAO;QAAExB,KAAK,EAAE,IAAI;QAAEC,WAAW,EAAE,MAAM;QAAEuB,KAAK,EAAE;MAAU,CAAC;IAC/D;EACF,CAAC;;EAED;EACA,MAAM3C,gBAAgB,GAAIxB,IAAI,IAAK;IACjC,IAAI,CAACwD,KAAK,CAACY,OAAO,CAACpE,IAAI,CAAC,EAAE,OAAOA,IAAI;IACrC,OAAOA,IAAI,CAAC6B,MAAM,CAAC,CAACC,GAAG,EAAEJ,KAAK,KAAKI,GAAG,GAAGJ,KAAK,EAAE,CAAC,CAAC,GAAG1B,IAAI,CAAC4B,MAAM;EAClE,CAAC;EAED,MAAMyC,KAAK,GAAG7C,gBAAgB,CAACD,SAAS,CAACe,EAAE,CAAC;EAC5C,MAAMgC,SAAS,GAAG9C,gBAAgB,CAACD,SAAS,CAACgB,MAAM,CAAC;EACpD,MAAMgC,eAAe,GAAG/C,gBAAgB,CAACD,SAAS,CAACiB,YAAY,CAAC;EAChE,MAAMgC,UAAU,GAAGhD,gBAAgB,CAACD,SAAS,CAACkB,OAAO,CAAC;EACtD,MAAMgC,aAAa,GAAGjD,gBAAgB,CAACD,SAAS,CAACmB,UAAU,CAAC;EAE5D,MAAMQ,YAAY,GAAGgB,oBAAoB,CACvCG,KAAK,EAAEC,SAAS,EAAEC,eAAe,EAAEC,UAAU,EAAEC,aACjD,CAAC;;EAED;EACA,MAAMzC,uBAAuB,GAAGA,CAAChC,IAAI,EAAE0E,aAAa,EAAEC,aAAa,GAAG,IAAI,KAAK;IAC7E,IAAI,CAACnB,KAAK,CAACY,OAAO,CAACpE,IAAI,CAAC,EAAE,OAAO,CAAC;IAClC,MAAMmC,cAAc,GAAGnC,IAAI,CAACa,MAAM,CAACa,KAAK,IACtCiD,aAAa,GAAGjD,KAAK,IAAIgD,aAAa,GAAGhD,KAAK,IAAIgD,aACpD,CAAC,CAAC9C,MAAM;IACR,OAAO,CAACO,cAAc,GAAGnC,IAAI,CAAC4B,MAAM,GAAG,GAAG,EAAEG,OAAO,CAAC,CAAC,CAAC;EACxD,CAAC;EAED,OAAO;IACLmB,YAAY;IACZb,QAAQ,EAAE;MACRC,EAAE,EAAE+B,KAAK,CAACtC,OAAO,CAAC,CAAC,CAAC;MACpBQ,MAAM,EAAE+B,SAAS,CAACvC,OAAO,CAAC,CAAC,CAAC;MAC5BS,YAAY,EAAE+B,eAAe,CAACxC,OAAO,CAAC,CAAC,CAAC;MACxCU,OAAO,EAAE+B,UAAU,CAACzC,OAAO,CAAC,CAAC,CAAC;MAC9BW,UAAU,EAAE+B,aAAa,CAAC1C,OAAO,CAAC,CAAC,CAAC;MACpCiB,QAAQ,EAAExB,gBAAgB,CAACD,SAAS,CAACyB,QAAQ,CAAC,CAACjB,OAAO,CAAC,CAAC,CAAC;MACzDc,WAAW,EAAErB,gBAAgB,CAACD,SAAS,CAACsB,WAAW,CAAC,CAACd,OAAO,CAAC,CAAC,CAAC;MAC/De,YAAY,EAAEtB,gBAAgB,CAACD,SAAS,CAACuB,YAAY,CAAC,CAACf,OAAO,CAAC,CAAC,CAAC;MACjEgB,SAAS,EAAEvB,gBAAgB,CAACD,SAAS,CAACwB,SAAS,CAAC,CAAChB,OAAO,CAAC,CAAC;IAC5D,CAAC;IACDkB,eAAe,EAAE;MACfX,EAAE,EAAEN,uBAAuB,CAACT,SAAS,CAACe,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,GAAG;MAC3DC,MAAM,EAAEP,uBAAuB,CAACT,SAAS,CAACgB,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,GAAG,GAAG;MACjEC,YAAY,EAAER,uBAAuB,CAACT,SAAS,CAACiB,YAAY,EAAE,CAAC,CAAC,GAAG,GAAG;MACtEC,OAAO,EAAET,uBAAuB,CAACT,SAAS,CAACkB,OAAO,EAAE,GAAG,CAAC,GAAG,GAAG;MAC9DC,UAAU,EAAEV,uBAAuB,CAACT,SAAS,CAACmB,UAAU,EAAE,GAAG,CAAC,GAAG;IACnE;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkC,eAAe,GAAIC,QAAQ,IAAK;EAC3C,IAAI,CAACA,QAAQ,IAAI,CAACrB,KAAK,CAACY,OAAO,CAACS,QAAQ,CAAC,IAAIA,QAAQ,CAACjD,MAAM,KAAK,CAAC,EAAE;IAClE,OAAO,IAAI;EACb;;EAEA;EACA,MAAMkD,aAAa,GAAG,CAAC,CAAC;EACxBD,QAAQ,CAAC1D,OAAO,CAAC4D,IAAI,IAAI;IACvB,MAAMC,OAAO,GAAGD,IAAI,CAACE,OAAO;IAC5B,IAAI,CAACH,aAAa,CAACE,OAAO,CAAC,EAAE;MAC3BF,aAAa,CAACE,OAAO,CAAC,GAAG,EAAE;IAC7B;IACAF,aAAa,CAACE,OAAO,CAAC,CAACE,IAAI,CAACH,IAAI,CAAC;EACnC,CAAC,CAAC;;EAEF;EACA,MAAMI,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACP,aAAa,CAAC,CAAC9D,GAAG,CAACgE,OAAO,IAAI;IAC7D,MAAMM,MAAM,GAAGR,aAAa,CAACE,OAAO,CAAC;IACrC,MAAMO,SAAS,GAAGD,MAAM,CAACzD,MAAM,CAAC,CAACC,GAAG,EAAEiD,IAAI,KAAKjD,GAAG,GAAG0D,UAAU,CAACT,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGO,MAAM,CAAC1D,MAAM;IACtG,MAAM6D,SAAS,GAAGH,MAAM,CAACzD,MAAM,CAAC,CAACC,GAAG,EAAEiD,IAAI,KAAKjD,GAAG,GAAG0D,UAAU,CAACT,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGO,MAAM,CAAC1D,MAAM;IACxG,MAAM8D,KAAK,GAAGJ,MAAM,CAAC1D,MAAM;IAE3B,OAAO;MACLoD,OAAO;MACPU,KAAK;MACLH,SAAS,EAAEA,SAAS,CAACxD,OAAO,CAAC,CAAC,CAAC;MAC/B0D,SAAS,EAAEA,SAAS,CAAC1D,OAAO,CAAC,CAAC;IAChC,CAAC;EACH,CAAC,CAAC;;EAEF;EACA,MAAM4D,UAAU,GAAGd,QAAQ,CAACjD,MAAM;EAClC,MAAMgE,YAAY,GAAGR,MAAM,CAACC,IAAI,CAACP,aAAa,CAAC,CAAClD,MAAM;EACtD,MAAMiE,WAAW,GAAGhB,QAAQ,CAAChD,MAAM,CAAC,CAACC,GAAG,EAAEiD,IAAI,KAAKjD,GAAG,GAAG0D,UAAU,CAACT,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1F,MAAMQ,SAAS,GAAG,CAACM,WAAW,GAAGF,UAAU,EAAE5D,OAAO,CAAC,CAAC,CAAC;EAEvD,OAAO;IACLoD,YAAY;IACZW,UAAU,EAAE;MACVH,UAAU;MACVC,YAAY;MACZC,WAAW,EAAEA,WAAW,CAAC9D,OAAO,CAAC,CAAC,CAAC;MACnCwD;IACF;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,+BAA+B,GAAIxE,SAAS,IAAK;EAC5D,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;;EAE3B;EACA,MAAMyE,cAAc,GAAIhG,IAAI,IAAK;IAC/B,IAAI,CAACwD,KAAK,CAACY,OAAO,CAACpE,IAAI,CAAC,IAAIA,IAAI,CAAC4B,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC;IAErD,MAAMqE,CAAC,GAAGjG,IAAI,CAAC4B,MAAM;IACrB,MAAMsE,OAAO,GAAG1C,KAAK,CAACC,IAAI,CAAC;MAAE7B,MAAM,EAAEqE;IAAE,CAAC,EAAE,CAACvC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;IAEtD,MAAMwC,IAAI,GAAGD,OAAO,CAACrE,MAAM,CAAC,CAACC,GAAG,EAAEsE,CAAC,KAAKtE,GAAG,GAAGsE,CAAC,EAAE,CAAC,CAAC;IACnD,MAAMC,IAAI,GAAGrG,IAAI,CAAC6B,MAAM,CAAC,CAACC,GAAG,EAAEwE,CAAC,KAAKxE,GAAG,GAAGwE,CAAC,EAAE,CAAC,CAAC;IAChD,MAAMC,KAAK,GAAGL,OAAO,CAACrE,MAAM,CAAC,CAACC,GAAG,EAAEsE,CAAC,EAAEzC,CAAC,KAAK7B,GAAG,GAAGsE,CAAC,GAAGpG,IAAI,CAAC2D,CAAC,CAAC,EAAE,CAAC,CAAC;IACjE,MAAM6C,KAAK,GAAGN,OAAO,CAACrE,MAAM,CAAC,CAACC,GAAG,EAAEsE,CAAC,KAAKtE,GAAG,GAAGsE,CAAC,GAAGA,CAAC,EAAE,CAAC,CAAC;;IAExD;IACA,MAAMK,KAAK,GAAG,CAACR,CAAC,GAAGM,KAAK,GAAGJ,IAAI,GAAGE,IAAI,KAAKJ,CAAC,GAAGO,KAAK,GAAGL,IAAI,GAAGA,IAAI,CAAC;IAEnE,OAAOM,KAAK;EACd,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAID,KAAK,IAAK;IACrC,MAAME,QAAQ,GAAG5C,IAAI,CAAC6C,GAAG,CAACH,KAAK,CAAC;IAChC,IAAII,SAAS,GAAG,EAAE;IAClB,IAAIC,QAAQ,GAAG,EAAE;IAEjB,IAAIL,KAAK,GAAG,CAAC,EAAE;MACbI,SAAS,GAAG,IAAI;IAClB,CAAC,MAAM,IAAIJ,KAAK,GAAG,CAAC,EAAE;MACpBI,SAAS,GAAG,IAAI;IAClB,CAAC,MAAM;MACLA,SAAS,GAAG,IAAI;IAClB;IAEA,IAAIF,QAAQ,GAAG,GAAG,EAAE;MAClBG,QAAQ,GAAG,IAAI;IACjB,CAAC,MAAM,IAAIH,QAAQ,GAAG,IAAI,EAAE;MAC1BG,QAAQ,GAAG,IAAI;IACjB,CAAC,MAAM,IAAIH,QAAQ,GAAG,IAAI,EAAE;MAC1BG,QAAQ,GAAG,IAAI;IACjB,CAAC,MAAM;MACLA,QAAQ,GAAG,OAAO;IACpB;IAEA,OAAO;MAAED,SAAS;MAAEC,QAAQ;MAAElE,WAAW,EAAEkE,QAAQ,GAAGD;IAAU,CAAC;EACnE,CAAC;EAED,OAAO;IACLhE,WAAW,EAAE6D,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACsB,WAAW,CAAC,CAAC;IACvEP,EAAE,EAAEoE,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACe,EAAE,CAAC,CAAC;IACrDC,MAAM,EAAEmE,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACgB,MAAM,CAAC,CAAC;IAC7DO,YAAY,EAAE4D,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACuB,YAAY,CAAC,CAAC;IACzEC,SAAS,EAAE2D,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACwB,SAAS,CAAC,CAAC;IACnEP,YAAY,EAAEkE,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACiB,YAAY,CAAC,CAAC;IACzEC,OAAO,EAAEiE,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACkB,OAAO,CAAC,CAAC;IAC/DC,UAAU,EAAEgE,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACmB,UAAU,CAAC,CAAC;IACrEM,QAAQ,EAAE0D,mBAAmB,CAACV,cAAc,CAACzE,SAAS,CAACyB,QAAQ,CAAC;EAClE,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+D,iCAAiC,GAAIxF,SAAS,IAAK;EAC9D,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAACgC,IAAI,EAAE,OAAO,EAAE;EAE5C,MAAMyD,SAAS,GAAG,EAAE;;EAEpB;EACA,MAAMC,YAAY,GAAG;IACnBpE,WAAW,EAAE;MAAEqE,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE,EAAE;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAK,CAAC;IACzD/E,EAAE,EAAE;MAAE4E,GAAG,EAAE,GAAG;MAAEC,GAAG,EAAE,GAAG;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAG,CAAC;IACjD9E,MAAM,EAAE;MAAE2E,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE,EAAE;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAO,CAAC;IACtDvE,YAAY,EAAE;MAAEoE,GAAG,EAAE,GAAG;MAAEC,GAAG,EAAE,GAAG;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAQ,CAAC;IAChEtE,SAAS,EAAE;MAAEmE,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE,EAAE;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAM,CAAC;IACvD7E,YAAY,EAAE;MAAE0E,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAO,CAAC;IAC9D5E,OAAO,EAAE;MAAEyE,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE,GAAG;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAO,CAAC;IACvD3E,UAAU,EAAE;MAAEwE,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE,GAAG;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAO,CAAC;IAC1DrE,QAAQ,EAAE;MAAEkE,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE,GAAG;MAAEC,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAO;EACzD,CAAC;;EAED;EACAjC,MAAM,CAACC,IAAI,CAAC4B,YAAY,CAAC,CAAC9F,OAAO,CAACmG,KAAK,IAAI;IACzC,IAAI,CAAC/F,SAAS,CAAC+F,KAAK,CAAC,IAAI,CAAC9D,KAAK,CAACY,OAAO,CAAC7C,SAAS,CAAC+F,KAAK,CAAC,CAAC,EAAE;IAE3D,MAAM;MAAEJ,GAAG;MAAEC,GAAG;MAAEC,IAAI;MAAEC;IAAK,CAAC,GAAGJ,YAAY,CAACK,KAAK,CAAC;IAEpD/F,SAAS,CAAC+F,KAAK,CAAC,CAACnG,OAAO,CAAC,CAACO,KAAK,EAAEL,KAAK,KAAK;MACzC,IAAIK,KAAK,GAAGwF,GAAG,IAAIxF,KAAK,GAAGyF,GAAG,EAAE;QAC9BH,SAAS,CAAC9B,IAAI,CAAC;UACbrF,GAAG,EAAE0B,SAAS,CAACgC,IAAI,CAAClC,KAAK,CAAC;UAC1BkG,SAAS,EAAEH,IAAI;UACf1F,KAAK,EAAE,GAAGA,KAAK,GAAG2F,IAAI,EAAE;UACxBG,WAAW,EAAE,GAAGN,GAAG,IAAIC,GAAG,GAAGE,IAAI,EAAE;UACnCI,QAAQ,EAAE/F,KAAK,GAAGwF,GAAG,GAAG,IAAI,GAAG,IAAI;UACnCQ,MAAM,EAAEC,gBAAgB,CAACL,KAAK,EAAE5F,KAAK,GAAGwF,GAAG;QAC7C,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOF,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,gBAAgB,GAAGA,CAACJ,SAAS,EAAEK,KAAK,KAAK;EAC7C,MAAMC,OAAO,GAAG;IACdhF,WAAW,EAAE;MACXiF,GAAG,EAAE,cAAc;MACnBC,IAAI,EAAE;IACR,CAAC;IACDzF,EAAE,EAAE;MACFwF,GAAG,EAAE,eAAe;MACpBC,IAAI,EAAE;IACR,CAAC;IACDxF,MAAM,EAAE;MACNuF,GAAG,EAAE,gBAAgB;MACrBC,IAAI,EAAE;IACR,CAAC;IACDjF,YAAY,EAAE;MACZgF,GAAG,EAAE,UAAU;MACfC,IAAI,EAAE;IACR,CAAC;IACDhF,SAAS,EAAE;MACT+E,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE;IACR,CAAC;IACDvF,YAAY,EAAE;MACZsF,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE;IACR,CAAC;IACDtF,OAAO,EAAE;MACPqF,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE;IACR,CAAC;IACDrF,UAAU,EAAE;MACVoF,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE;IACR,CAAC;IACD/E,QAAQ,EAAE;MACR8E,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE;IACR;EACF,CAAC;EAED,OAAOF,OAAO,CAACN,SAAS,CAAC,GAAIK,KAAK,GAAGC,OAAO,CAACN,SAAS,CAAC,CAACO,GAAG,GAAGD,OAAO,CAACN,SAAS,CAAC,CAACQ,IAAI,GAAI,MAAM;AACjG,CAAC;AAED,MAAMC,WAAW,GAAG;EAClBtI,oBAAoB;EACpBS,2BAA2B;EAC3BE,YAAY;EACZ4D,mBAAmB;EACnBW,eAAe;EACfmB,+BAA+B;EAC/BgB;AACF,CAAC;AAED,eAAeiB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}