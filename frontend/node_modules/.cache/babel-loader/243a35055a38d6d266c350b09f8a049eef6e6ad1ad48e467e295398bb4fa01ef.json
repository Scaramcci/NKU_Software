{"ast":null,"code":"/**\n * 设备控制服务\n * 处理设备控制逻辑和自动化控制\n */\n\nimport api from './api';\nimport { analyzeWaterQuality } from './dataService';\n\n// 设备类型常量\nexport const DEVICE_TYPES = {\n  PUMP: 'pump',\n  AERATOR: 'aerator',\n  FEEDER: 'feeder',\n  SENSOR: 'sensor',\n  CAMERA: 'camera',\n  FILTER: 'filter'\n};\n\n// 设备状态常量\nexport const DEVICE_STATUS = {\n  ONLINE: 'online',\n  OFFLINE: 'offline',\n  WARNING: 'warning'\n};\n\n// 设备电源状态常量\nexport const POWER_STATUS = {\n  ON: 'on',\n  OFF: 'off'\n};\n\n/**\n * 获取所有设备列表\n * @returns {Promise} - 返回设备列表\n */\nexport const getAllDevices = async () => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.get('/devices');\n    // return response.data;\n\n    // 由于我们没有实际的API，这里返回模拟数据\n    return mockDevices;\n  } catch (error) {\n    console.error('获取设备列表失败:', error);\n    throw error;\n  }\n};\n\n/**\n * 获取设备状态\n * @param {number} deviceId - 设备ID\n * @returns {Promise} - 返回设备状态\n */\nexport const getDeviceStatus = async deviceId => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.get(`/devices/${deviceId}/status`);\n    // return response.data;\n\n    // 由于我们没有实际的API，这里返回模拟数据\n    const device = mockDevices.find(d => d.id === deviceId);\n    if (!device) {\n      throw new Error('设备不存在');\n    }\n\n    // 模拟随机状态变化\n    if (Math.random() > 0.8) {\n      device.status = Math.random() > 0.5 ? DEVICE_STATUS.ONLINE : DEVICE_STATUS.WARNING;\n    }\n    return {\n      status: device.status,\n      powerStatus: device.powerStatus,\n      lastUpdated: new Date().toISOString().replace('T', ' ').substring(0, 19)\n    };\n  } catch (error) {\n    console.error(`获取设备${deviceId}状态失败:`, error);\n    throw error;\n  }\n};\n\n/**\n * 控制设备\n * @param {number} deviceId - 设备ID\n * @param {string} action - 控制动作，如 'start', 'stop', 'restart'\n * @returns {Promise} - 返回控制结果\n */\nexport const controlDeviceAction = async (deviceId, action) => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.post(`/devices/${deviceId}/control`, { action });\n    // return response.data;\n\n    // 由于我们没有实际的API，这里返回模拟数据\n    const device = mockDevices.find(d => d.id === deviceId);\n    if (!device) {\n      throw new Error('设备不存在');\n    }\n\n    // 模拟设备控制\n    switch (action) {\n      case 'start':\n        device.powerStatus = POWER_STATUS.ON;\n        break;\n      case 'stop':\n        device.powerStatus = POWER_STATUS.OFF;\n        break;\n      case 'restart':\n        device.powerStatus = POWER_STATUS.OFF;\n        setTimeout(() => {\n          device.powerStatus = POWER_STATUS.ON;\n        }, 2000);\n        break;\n      default:\n        throw new Error('不支持的操作');\n    }\n    device.lastUpdated = new Date().toISOString().replace('T', ' ').substring(0, 19);\n    return {\n      success: true,\n      message: `设备${deviceId}已${action === 'start' ? '启动' : action === 'stop' ? '停止' : '重启'}`,\n      status: device.status,\n      powerStatus: device.powerStatus,\n      lastUpdated: device.lastUpdated\n    };\n  } catch (error) {\n    console.error(`控制设备${deviceId}失败:`, error);\n    throw error;\n  }\n};\n\n/**\n * 设置设备自动控制规则\n * @param {number} deviceId - 设备ID\n * @param {Object} rules - 控制规则\n * @returns {Promise} - 返回设置结果\n */\nexport const setDeviceAutoControlRules = async (deviceId, rules) => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.post(`/devices/${deviceId}/auto-control`, rules);\n    // return response.data;\n\n    // 由于我们没有实际的API，这里返回模拟数据\n    return {\n      success: true,\n      message: '自动控制规则设置成功'\n    };\n  } catch (error) {\n    console.error(`设置设备${deviceId}自动控制规则失败:`, error);\n    throw error;\n  }\n};\n\n/**\n * 根据水质参数自动控制设备\n * @param {Object} waterData - 水质数据\n * @param {Array} devices - 设备列表\n * @returns {Promise} - 返回控制结果\n */\nexport const autoControlDevicesByWaterQuality = async (waterData, devices) => {\n  try {\n    // 分析水质数据\n    const analysis = analyzeWaterQuality(waterData);\n    if (!analysis) {\n      throw new Error('水质数据分析失败');\n    }\n    const controlResults = [];\n\n    // 根据水质参数控制设备\n    for (const device of devices) {\n      let action = null;\n\n      // 根据设备类型和水质参数决定控制动作\n      switch (device.type) {\n        case DEVICE_TYPES.AERATOR:\n          // 当溶解氧低于5mg/L时，启动增氧机\n          if (analysis.averages.oxygen < 5 && device.powerStatus === POWER_STATUS.OFF) {\n            action = 'start';\n          }\n          // 当溶解氧高于8mg/L时，停止增氧机\n          else if (analysis.averages.oxygen > 8 && device.powerStatus === POWER_STATUS.ON) {\n            action = 'stop';\n          }\n          break;\n        case DEVICE_TYPES.PUMP:\n          // 当氨氮或总磷超标时，启动水泵进行换水\n          if ((analysis.averages.ammonia > 1.0 || analysis.averages.phosphorus > 0.2) && device.powerStatus === POWER_STATUS.OFF) {\n            action = 'start';\n          }\n          // 当水质恢复正常时，停止水泵\n          else if (analysis.averages.ammonia < 0.5 && analysis.averages.phosphorus < 0.1 && device.powerStatus === POWER_STATUS.ON) {\n            action = 'stop';\n          }\n          break;\n        case DEVICE_TYPES.FILTER:\n          // 当浊度高时，启动过滤器\n          if (analysis.averages.turbidity > 20 && device.powerStatus === POWER_STATUS.OFF) {\n            action = 'start';\n          }\n          // 当浊度恢复正常时，停止过滤器\n          else if (analysis.averages.turbidity < 10 && device.powerStatus === POWER_STATUS.ON) {\n            action = 'stop';\n          }\n          break;\n      }\n\n      // 执行控制动作\n      if (action) {\n        try {\n          const result = await controlDeviceAction(device.id, action);\n          controlResults.push({\n            deviceId: device.id,\n            deviceName: device.name,\n            action,\n            success: true,\n            message: result.message\n          });\n        } catch (error) {\n          controlResults.push({\n            deviceId: device.id,\n            deviceName: device.name,\n            action,\n            success: false,\n            message: error.message\n          });\n        }\n      }\n    }\n    return controlResults;\n  } catch (error) {\n    console.error('自动控制设备失败:', error);\n    throw error;\n  }\n};\n\n// 模拟设备数据\nconst mockDevices = [{\n  id: 1,\n  name: '水泵A-01',\n  type: DEVICE_TYPES.PUMP,\n  farmName: '南湖养殖场',\n  status: DEVICE_STATUS.ONLINE,\n  powerStatus: POWER_STATUS.ON,\n  lastUpdated: '2023-05-15 08:30:22',\n  parameters: {\n    flowRate: 50,\n    // 流量 (L/min)\n    pressure: 2.5 // 压力 (bar)\n  }\n}, {\n  id: 2,\n  name: '增氧机B-02',\n  type: DEVICE_TYPES.AERATOR,\n  farmName: '南湖养殖场',\n  status: DEVICE_STATUS.ONLINE,\n  powerStatus: POWER_STATUS.ON,\n  lastUpdated: '2023-05-15 09:15:43',\n  parameters: {\n    oxygenOutput: 8.5,\n    // 供氧量 (mg/L)\n    powerConsumption: 1.2 // 功耗 (kW)\n  }\n}, {\n  id: 3,\n  name: '投饵机C-03',\n  type: DEVICE_TYPES.FEEDER,\n  farmName: '东湖养殖场',\n  status: DEVICE_STATUS.OFFLINE,\n  powerStatus: POWER_STATUS.OFF,\n  lastUpdated: '2023-05-14 18:22:10',\n  parameters: {\n    feedAmount: 2.5,\n    // 投饵量 (kg)\n    feedInterval: 4 // 投饵间隔 (小时)\n  }\n}, {\n  id: 4,\n  name: '水质传感器D-04',\n  type: DEVICE_TYPES.SENSOR,\n  farmName: '东湖养殖场',\n  status: DEVICE_STATUS.WARNING,\n  powerStatus: POWER_STATUS.ON,\n  lastUpdated: '2023-05-15 10:05:37',\n  parameters: {\n    accuracy: 0.01,\n    // 精度\n    batteryLevel: 75 // 电池电量 (%)\n  }\n}, {\n  id: 5,\n  name: '监控摄像头E-05',\n  type: DEVICE_TYPES.CAMERA,\n  farmName: '西湖养殖场',\n  status: DEVICE_STATUS.ONLINE,\n  powerStatus: POWER_STATUS.ON,\n  lastUpdated: '2023-05-15 07:45:19',\n  parameters: {\n    resolution: '1080p',\n    // 分辨率\n    storageRemaining: 128 // 剩余存储空间 (GB)\n  }\n}, {\n  id: 6,\n  name: '过滤器F-06',\n  type: DEVICE_TYPES.FILTER,\n  farmName: '南湖养殖场',\n  status: DEVICE_STATUS.ONLINE,\n  powerStatus: POWER_STATUS.ON,\n  lastUpdated: '2023-05-15 11:20:05',\n  parameters: {\n    filterEfficiency: 95,\n    // 过滤效率 (%)\n    maintenanceRequired: false // 是否需要维护\n  }\n}];\nexport default {\n  getAllDevices,\n  getDeviceStatus,\n  controlDeviceAction,\n  setDeviceAutoControlRules,\n  autoControlDevicesByWaterQuality,\n  DEVICE_TYPES,\n  DEVICE_STATUS,\n  POWER_STATUS\n};","map":{"version":3,"names":["api","analyzeWaterQuality","DEVICE_TYPES","PUMP","AERATOR","FEEDER","SENSOR","CAMERA","FILTER","DEVICE_STATUS","ONLINE","OFFLINE","WARNING","POWER_STATUS","ON","OFF","getAllDevices","mockDevices","error","console","getDeviceStatus","deviceId","device","find","d","id","Error","Math","random","status","powerStatus","lastUpdated","Date","toISOString","replace","substring","controlDeviceAction","action","setTimeout","success","message","setDeviceAutoControlRules","rules","autoControlDevicesByWaterQuality","waterData","devices","analysis","controlResults","type","averages","oxygen","ammonia","phosphorus","turbidity","result","push","deviceName","name","farmName","parameters","flowRate","pressure","oxygenOutput","powerConsumption","feedAmount","feedInterval","accuracy","batteryLevel","resolution","storageRemaining","filterEfficiency","maintenanceRequired"],"sources":["D:/文雅竹/作业/大三下/软件工程/NKU_Software/frontend/src/services/deviceControlService.js"],"sourcesContent":["/**\n * 设备控制服务\n * 处理设备控制逻辑和自动化控制\n */\n\nimport api from './api';\nimport { analyzeWaterQuality } from './dataService';\n\n// 设备类型常量\nexport const DEVICE_TYPES = {\n  PUMP: 'pump',\n  AERATOR: 'aerator',\n  FEEDER: 'feeder',\n  SENSOR: 'sensor',\n  CAMERA: 'camera',\n  FILTER: 'filter'\n};\n\n// 设备状态常量\nexport const DEVICE_STATUS = {\n  ONLINE: 'online',\n  OFFLINE: 'offline',\n  WARNING: 'warning'\n};\n\n// 设备电源状态常量\nexport const POWER_STATUS = {\n  ON: 'on',\n  OFF: 'off'\n};\n\n/**\n * 获取所有设备列表\n * @returns {Promise} - 返回设备列表\n */\nexport const getAllDevices = async () => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.get('/devices');\n    // return response.data;\n    \n    // 由于我们没有实际的API，这里返回模拟数据\n    return mockDevices;\n  } catch (error) {\n    console.error('获取设备列表失败:', error);\n    throw error;\n  }\n};\n\n/**\n * 获取设备状态\n * @param {number} deviceId - 设备ID\n * @returns {Promise} - 返回设备状态\n */\nexport const getDeviceStatus = async (deviceId) => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.get(`/devices/${deviceId}/status`);\n    // return response.data;\n    \n    // 由于我们没有实际的API，这里返回模拟数据\n    const device = mockDevices.find(d => d.id === deviceId);\n    if (!device) {\n      throw new Error('设备不存在');\n    }\n    \n    // 模拟随机状态变化\n    if (Math.random() > 0.8) {\n      device.status = Math.random() > 0.5 ? DEVICE_STATUS.ONLINE : DEVICE_STATUS.WARNING;\n    }\n    \n    return {\n      status: device.status,\n      powerStatus: device.powerStatus,\n      lastUpdated: new Date().toISOString().replace('T', ' ').substring(0, 19)\n    };\n  } catch (error) {\n    console.error(`获取设备${deviceId}状态失败:`, error);\n    throw error;\n  }\n};\n\n/**\n * 控制设备\n * @param {number} deviceId - 设备ID\n * @param {string} action - 控制动作，如 'start', 'stop', 'restart'\n * @returns {Promise} - 返回控制结果\n */\nexport const controlDeviceAction = async (deviceId, action) => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.post(`/devices/${deviceId}/control`, { action });\n    // return response.data;\n    \n    // 由于我们没有实际的API，这里返回模拟数据\n    const device = mockDevices.find(d => d.id === deviceId);\n    if (!device) {\n      throw new Error('设备不存在');\n    }\n    \n    // 模拟设备控制\n    switch (action) {\n      case 'start':\n        device.powerStatus = POWER_STATUS.ON;\n        break;\n      case 'stop':\n        device.powerStatus = POWER_STATUS.OFF;\n        break;\n      case 'restart':\n        device.powerStatus = POWER_STATUS.OFF;\n        setTimeout(() => {\n          device.powerStatus = POWER_STATUS.ON;\n        }, 2000);\n        break;\n      default:\n        throw new Error('不支持的操作');\n    }\n    \n    device.lastUpdated = new Date().toISOString().replace('T', ' ').substring(0, 19);\n    \n    return {\n      success: true,\n      message: `设备${deviceId}已${action === 'start' ? '启动' : action === 'stop' ? '停止' : '重启'}`,\n      status: device.status,\n      powerStatus: device.powerStatus,\n      lastUpdated: device.lastUpdated\n    };\n  } catch (error) {\n    console.error(`控制设备${deviceId}失败:`, error);\n    throw error;\n  }\n};\n\n/**\n * 设置设备自动控制规则\n * @param {number} deviceId - 设备ID\n * @param {Object} rules - 控制规则\n * @returns {Promise} - 返回设置结果\n */\nexport const setDeviceAutoControlRules = async (deviceId, rules) => {\n  try {\n    // 在实际项目中，这里应该是一个API调用\n    // const response = await api.post(`/devices/${deviceId}/auto-control`, rules);\n    // return response.data;\n    \n    // 由于我们没有实际的API，这里返回模拟数据\n    return {\n      success: true,\n      message: '自动控制规则设置成功'\n    };\n  } catch (error) {\n    console.error(`设置设备${deviceId}自动控制规则失败:`, error);\n    throw error;\n  }\n};\n\n/**\n * 根据水质参数自动控制设备\n * @param {Object} waterData - 水质数据\n * @param {Array} devices - 设备列表\n * @returns {Promise} - 返回控制结果\n */\nexport const autoControlDevicesByWaterQuality = async (waterData, devices) => {\n  try {\n    // 分析水质数据\n    const analysis = analyzeWaterQuality(waterData);\n    if (!analysis) {\n      throw new Error('水质数据分析失败');\n    }\n    \n    const controlResults = [];\n    \n    // 根据水质参数控制设备\n    for (const device of devices) {\n      let action = null;\n      \n      // 根据设备类型和水质参数决定控制动作\n      switch (device.type) {\n        case DEVICE_TYPES.AERATOR:\n          // 当溶解氧低于5mg/L时，启动增氧机\n          if (analysis.averages.oxygen < 5 && device.powerStatus === POWER_STATUS.OFF) {\n            action = 'start';\n          }\n          // 当溶解氧高于8mg/L时，停止增氧机\n          else if (analysis.averages.oxygen > 8 && device.powerStatus === POWER_STATUS.ON) {\n            action = 'stop';\n          }\n          break;\n          \n        case DEVICE_TYPES.PUMP:\n          // 当氨氮或总磷超标时，启动水泵进行换水\n          if ((analysis.averages.ammonia > 1.0 || analysis.averages.phosphorus > 0.2) && \n              device.powerStatus === POWER_STATUS.OFF) {\n            action = 'start';\n          }\n          // 当水质恢复正常时，停止水泵\n          else if (analysis.averages.ammonia < 0.5 && analysis.averages.phosphorus < 0.1 && \n                  device.powerStatus === POWER_STATUS.ON) {\n            action = 'stop';\n          }\n          break;\n          \n        case DEVICE_TYPES.FILTER:\n          // 当浊度高时，启动过滤器\n          if (analysis.averages.turbidity > 20 && device.powerStatus === POWER_STATUS.OFF) {\n            action = 'start';\n          }\n          // 当浊度恢复正常时，停止过滤器\n          else if (analysis.averages.turbidity < 10 && device.powerStatus === POWER_STATUS.ON) {\n            action = 'stop';\n          }\n          break;\n      }\n      \n      // 执行控制动作\n      if (action) {\n        try {\n          const result = await controlDeviceAction(device.id, action);\n          controlResults.push({\n            deviceId: device.id,\n            deviceName: device.name,\n            action,\n            success: true,\n            message: result.message\n          });\n        } catch (error) {\n          controlResults.push({\n            deviceId: device.id,\n            deviceName: device.name,\n            action,\n            success: false,\n            message: error.message\n          });\n        }\n      }\n    }\n    \n    return controlResults;\n  } catch (error) {\n    console.error('自动控制设备失败:', error);\n    throw error;\n  }\n};\n\n// 模拟设备数据\nconst mockDevices = [\n  {\n    id: 1,\n    name: '水泵A-01',\n    type: DEVICE_TYPES.PUMP,\n    farmName: '南湖养殖场',\n    status: DEVICE_STATUS.ONLINE,\n    powerStatus: POWER_STATUS.ON,\n    lastUpdated: '2023-05-15 08:30:22',\n    parameters: {\n      flowRate: 50, // 流量 (L/min)\n      pressure: 2.5 // 压力 (bar)\n    }\n  },\n  {\n    id: 2,\n    name: '增氧机B-02',\n    type: DEVICE_TYPES.AERATOR,\n    farmName: '南湖养殖场',\n    status: DEVICE_STATUS.ONLINE,\n    powerStatus: POWER_STATUS.ON,\n    lastUpdated: '2023-05-15 09:15:43',\n    parameters: {\n      oxygenOutput: 8.5, // 供氧量 (mg/L)\n      powerConsumption: 1.2 // 功耗 (kW)\n    }\n  },\n  {\n    id: 3,\n    name: '投饵机C-03',\n    type: DEVICE_TYPES.FEEDER,\n    farmName: '东湖养殖场',\n    status: DEVICE_STATUS.OFFLINE,\n    powerStatus: POWER_STATUS.OFF,\n    lastUpdated: '2023-05-14 18:22:10',\n    parameters: {\n      feedAmount: 2.5, // 投饵量 (kg)\n      feedInterval: 4 // 投饵间隔 (小时)\n    }\n  },\n  {\n    id: 4,\n    name: '水质传感器D-04',\n    type: DEVICE_TYPES.SENSOR,\n    farmName: '东湖养殖场',\n    status: DEVICE_STATUS.WARNING,\n    powerStatus: POWER_STATUS.ON,\n    lastUpdated: '2023-05-15 10:05:37',\n    parameters: {\n      accuracy: 0.01, // 精度\n      batteryLevel: 75 // 电池电量 (%)\n    }\n  },\n  {\n    id: 5,\n    name: '监控摄像头E-05',\n    type: DEVICE_TYPES.CAMERA,\n    farmName: '西湖养殖场',\n    status: DEVICE_STATUS.ONLINE,\n    powerStatus: POWER_STATUS.ON,\n    lastUpdated: '2023-05-15 07:45:19',\n    parameters: {\n      resolution: '1080p', // 分辨率\n      storageRemaining: 128 // 剩余存储空间 (GB)\n    }\n  },\n  {\n    id: 6,\n    name: '过滤器F-06',\n    type: DEVICE_TYPES.FILTER,\n    farmName: '南湖养殖场',\n    status: DEVICE_STATUS.ONLINE,\n    powerStatus: POWER_STATUS.ON,\n    lastUpdated: '2023-05-15 11:20:05',\n    parameters: {\n      filterEfficiency: 95, // 过滤效率 (%)\n      maintenanceRequired: false // 是否需要维护\n    }\n  }\n];\n\nexport default {\n  getAllDevices,\n  getDeviceStatus,\n  controlDeviceAction,\n  setDeviceAutoControlRules,\n  autoControlDevicesByWaterQuality,\n  DEVICE_TYPES,\n  DEVICE_STATUS,\n  POWER_STATUS\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}