{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  // 环境监测数据\n  temperature: [],\n  ph: [],\n  oxygen: [],\n  devices: {\n    aerator: false,\n    feeder: false\n  },\n  // 渔场管理数据\n  farms: [],\n  currentFarm: null,\n  environmentData: {\n    temperature: [],\n    ph: [],\n    oxygen: [],\n    turbidity: []\n  },\n  environmentDataLoading: false,\n  loading: false,\n  error: null\n};\nconst farmSlice = createSlice({\n  name: 'farm',\n  initialState,\n  reducers: {\n    // 原有的环境监测相关\n    updateFarmData: (state, action) => {\n      const {\n        temperature,\n        ph,\n        oxygen\n      } = action.payload;\n      state.temperature = temperature;\n      state.ph = ph;\n      state.oxygen = oxygen;\n    },\n    toggleDevice: (state, action) => {\n      const {\n        device\n      } = action.payload;\n      state.devices[device] = !state.devices[device];\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // 渔场管理相关\n    fetchFarmsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchFarmsSuccess: (state, action) => {\n      state.farms = action.payload;\n      state.loading = false;\n    },\n    fetchFarmsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setCurrentFarm: (state, action) => {\n      state.currentFarm = action.payload;\n    },\n    addFarm: (state, action) => {\n      state.farms.push(action.payload);\n      // 更新本地存储\n      localStorage.setItem('farms', JSON.stringify(state.farms));\n    },\n    updateFarm: (state, action) => {\n      const index = state.farms.findIndex(farm => farm.id === action.payload.id);\n      if (index !== -1) {\n        state.farms[index] = {\n          ...state.farms[index],\n          ...action.payload\n        };\n        // 如果当前选中的渔场被更新，也更新currentFarm\n        if (state.currentFarm && state.currentFarm.id === action.payload.id) {\n          state.currentFarm = {\n            ...state.currentFarm,\n            ...action.payload\n          };\n        }\n        // 更新本地存储\n        localStorage.setItem('farms', JSON.stringify(state.farms));\n      }\n    },\n    deleteFarm: (state, action) => {\n      state.farms = state.farms.filter(farm => farm.id !== action.payload);\n      // 如果删除的是当前选中的渔场，清空currentFarm\n      if (state.currentFarm && state.currentFarm.id === action.payload) {\n        state.currentFarm = null;\n      }\n      // 更新本地存储\n      localStorage.setItem('farms', JSON.stringify(state.farms));\n    },\n    // 环境数据相关\n    fetchEnvironmentDataStart: state => {\n      state.environmentDataLoading = true;\n    },\n    fetchEnvironmentDataSuccess: (state, action) => {\n      state.environmentData = action.payload;\n      state.environmentDataLoading = false;\n    },\n    fetchEnvironmentDataFailure: (state, action) => {\n      state.environmentDataLoading = false;\n      state.error = action.payload;\n    },\n    // 初始化从本地存储加载数据\n    initializeFromLocalStorage: state => {\n      try {\n        const storedFarms = localStorage.getItem('farms');\n        if (storedFarms) {\n          state.farms = JSON.parse(storedFarms);\n        }\n      } catch (error) {\n        console.error('从本地存储加载渔场数据失败:', error);\n      }\n    }\n  }\n});\nexport const {\n  updateFarmData,\n  toggleDevice,\n  setLoading,\n  setError,\n  fetchFarmsStart,\n  fetchFarmsSuccess,\n  fetchFarmsFailure,\n  setCurrentFarm,\n  addFarm,\n  updateFarm,\n  deleteFarm,\n  fetchEnvironmentDataStart,\n  fetchEnvironmentDataSuccess,\n  fetchEnvironmentDataFailure,\n  initializeFromLocalStorage\n} = farmSlice.actions;\nexport default farmSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","temperature","ph","oxygen","devices","aerator","feeder","farms","currentFarm","environmentData","turbidity","environmentDataLoading","loading","error","farmSlice","name","reducers","updateFarmData","state","action","payload","toggleDevice","device","setLoading","setError","fetchFarmsStart","fetchFarmsSuccess","fetchFarmsFailure","setCurrentFarm","addFarm","push","localStorage","setItem","JSON","stringify","updateFarm","index","findIndex","farm","id","deleteFarm","filter","fetchEnvironmentDataStart","fetchEnvironmentDataSuccess","fetchEnvironmentDataFailure","initializeFromLocalStorage","storedFarms","getItem","parse","console","actions","reducer"],"sources":["D:/文雅竹/作业/大三下/软件工程/NKU_Software/frontend/src/redux/reducers/farmSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  // 环境监测数据\n  temperature: [],\n  ph: [],\n  oxygen: [],\n  devices: {\n    aerator: false,\n    feeder: false\n  },\n  // 渔场管理数据\n  farms: [],\n  currentFarm: null,\n  environmentData: {\n    temperature: [],\n    ph: [],\n    oxygen: [],\n    turbidity: []\n  },\n  environmentDataLoading: false,\n  loading: false,\n  error: null\n};\n\nconst farmSlice = createSlice({\n  name: 'farm',\n  initialState,\n  reducers: {\n    // 原有的环境监测相关\n    updateFarmData: (state, action) => {\n      const { temperature, ph, oxygen } = action.payload;\n      state.temperature = temperature;\n      state.ph = ph;\n      state.oxygen = oxygen;\n    },\n    toggleDevice: (state, action) => {\n      const { device } = action.payload;\n      state.devices[device] = !state.devices[device];\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    \n    // 渔场管理相关\n    fetchFarmsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchFarmsSuccess: (state, action) => {\n      state.farms = action.payload;\n      state.loading = false;\n    },\n    fetchFarmsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setCurrentFarm: (state, action) => {\n      state.currentFarm = action.payload;\n    },\n    addFarm: (state, action) => {\n      state.farms.push(action.payload);\n      // 更新本地存储\n      localStorage.setItem('farms', JSON.stringify(state.farms));\n    },\n    updateFarm: (state, action) => {\n      const index = state.farms.findIndex(farm => farm.id === action.payload.id);\n      if (index !== -1) {\n        state.farms[index] = { ...state.farms[index], ...action.payload };\n        // 如果当前选中的渔场被更新，也更新currentFarm\n        if (state.currentFarm && state.currentFarm.id === action.payload.id) {\n          state.currentFarm = { ...state.currentFarm, ...action.payload };\n        }\n        // 更新本地存储\n        localStorage.setItem('farms', JSON.stringify(state.farms));\n      }\n    },\n    deleteFarm: (state, action) => {\n      state.farms = state.farms.filter(farm => farm.id !== action.payload);\n      // 如果删除的是当前选中的渔场，清空currentFarm\n      if (state.currentFarm && state.currentFarm.id === action.payload) {\n        state.currentFarm = null;\n      }\n      // 更新本地存储\n      localStorage.setItem('farms', JSON.stringify(state.farms));\n    },\n    // 环境数据相关\n    fetchEnvironmentDataStart: (state) => {\n      state.environmentDataLoading = true;\n    },\n    fetchEnvironmentDataSuccess: (state, action) => {\n      state.environmentData = action.payload;\n      state.environmentDataLoading = false;\n    },\n    fetchEnvironmentDataFailure: (state, action) => {\n      state.environmentDataLoading = false;\n      state.error = action.payload;\n    },\n    // 初始化从本地存储加载数据\n    initializeFromLocalStorage: (state) => {\n      try {\n        const storedFarms = localStorage.getItem('farms');\n        if (storedFarms) {\n          state.farms = JSON.parse(storedFarms);\n        }\n      } catch (error) {\n        console.error('从本地存储加载渔场数据失败:', error);\n      }\n    }\n  }\n});\n\nexport const { \n  updateFarmData, \n  toggleDevice, \n  setLoading, \n  setError,\n  fetchFarmsStart,\n  fetchFarmsSuccess,\n  fetchFarmsFailure,\n  setCurrentFarm,\n  addFarm,\n  updateFarm,\n  deleteFarm,\n  fetchEnvironmentDataStart,\n  fetchEnvironmentDataSuccess,\n  fetchEnvironmentDataFailure,\n  initializeFromLocalStorage\n} = farmSlice.actions;\nexport default farmSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}