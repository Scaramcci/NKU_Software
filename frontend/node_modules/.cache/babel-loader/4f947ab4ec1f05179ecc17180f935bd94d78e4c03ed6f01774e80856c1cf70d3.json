{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport deviceService from '../../services/deviceService';\n\n// 异步获取设备列表\nexport const fetchDevices = createAsyncThunk('device/fetchDevices', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await deviceService.getDevices();\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || '获取设备列表失败');\n  }\n});\n\n// 异步获取设备状态\nexport const fetchDeviceStatus = createAsyncThunk('device/fetchDeviceStatus', async (deviceId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await deviceService.getDeviceStatus(deviceId);\n    return {\n      id: deviceId,\n      status: response.data\n    };\n  } catch (error) {\n    var _error$response2;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || '获取设备状态失败');\n  }\n});\n\n// 异步控制设备\nexport const controlDevice = createAsyncThunk('device/controlDevice', async ({\n  deviceId,\n  action\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await deviceService.controlDevice(deviceId, action);\n    return {\n      id: deviceId,\n      result: response.data\n    };\n  } catch (error) {\n    var _error$response3;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || '设备控制操作失败');\n  }\n});\nconst deviceSlice = createSlice({\n  name: 'device',\n  initialState: {\n    devices: [],\n    loading: false,\n    error: null,\n    controlStatus: {}\n  },\n  reducers: {\n    clearDeviceError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // 获取设备列表\n    .addCase(fetchDevices.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchDevices.fulfilled, (state, action) => {\n      state.loading = false;\n      state.devices = action.payload;\n    }).addCase(fetchDevices.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || '获取设备列表失败';\n    })\n\n    // 获取设备状态\n    .addCase(fetchDeviceStatus.fulfilled, (state, action) => {\n      const {\n        id,\n        status\n      } = action.payload;\n      const deviceIndex = state.devices.findIndex(device => device.id === id);\n      if (deviceIndex !== -1) {\n        state.devices[deviceIndex].status = status;\n      }\n    }).addCase(fetchDeviceStatus.rejected, (state, action) => {\n      state.error = action.payload || '获取设备状态失败';\n    })\n\n    // 控制设备\n    .addCase(controlDevice.pending, (state, action) => {\n      const {\n        deviceId\n      } = action.meta.arg;\n      state.controlStatus[deviceId] = 'pending';\n    }).addCase(controlDevice.fulfilled, (state, action) => {\n      const {\n        id\n      } = action.payload;\n      state.controlStatus[id] = 'success';\n      // 更新设备状态\n      const deviceIndex = state.devices.findIndex(device => device.id === id);\n      if (deviceIndex !== -1) {\n        // 假设控制成功后，设备状态会相应变化\n        // 实际应用中可能需要重新获取设备状态\n      }\n    }).addCase(controlDevice.rejected, (state, action) => {\n      const {\n        deviceId\n      } = action.meta.arg;\n      state.controlStatus[deviceId] = 'failed';\n      state.error = action.payload || '设备控制操作失败';\n    });\n  }\n});\nexport const {\n  clearDeviceError\n} = deviceSlice.actions;\nexport default deviceSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","deviceService","fetchDevices","_","rejectWithValue","response","getDevices","data","error","_error$response","fetchDeviceStatus","deviceId","getDeviceStatus","id","status","_error$response2","controlDevice","action","result","_error$response3","deviceSlice","name","initialState","devices","loading","controlStatus","reducers","clearDeviceError","state","extraReducers","builder","addCase","pending","fulfilled","payload","rejected","deviceIndex","findIndex","device","meta","arg","actions","reducer"],"sources":["D:/文雅竹/作业/大三下/软件工程/NKU_Software-main2/NKU_Software-main/frontend/src/redux/reducers/deviceSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport deviceService from '../../services/deviceService';\n\n// 异步获取设备列表\nexport const fetchDevices = createAsyncThunk(\n  'device/fetchDevices',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await deviceService.getDevices();\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data || '获取设备列表失败');\n    }\n  }\n);\n\n// 异步获取设备状态\nexport const fetchDeviceStatus = createAsyncThunk(\n  'device/fetchDeviceStatus',\n  async (deviceId, { rejectWithValue }) => {\n    try {\n      const response = await deviceService.getDeviceStatus(deviceId);\n      return { id: deviceId, status: response.data };\n    } catch (error) {\n      return rejectWithValue(error.response?.data || '获取设备状态失败');\n    }\n  }\n);\n\n// 异步控制设备\nexport const controlDevice = createAsyncThunk(\n  'device/controlDevice',\n  async ({ deviceId, action }, { rejectWithValue }) => {\n    try {\n      const response = await deviceService.controlDevice(deviceId, action);\n      return { id: deviceId, result: response.data };\n    } catch (error) {\n      return rejectWithValue(error.response?.data || '设备控制操作失败');\n    }\n  }\n);\n\nconst deviceSlice = createSlice({\n  name: 'device',\n  initialState: {\n    devices: [],\n    loading: false,\n    error: null,\n    controlStatus: {}\n  },\n  reducers: {\n    clearDeviceError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // 获取设备列表\n      .addCase(fetchDevices.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchDevices.fulfilled, (state, action) => {\n        state.loading = false;\n        state.devices = action.payload;\n      })\n      .addCase(fetchDevices.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload || '获取设备列表失败';\n      })\n      \n      // 获取设备状态\n      .addCase(fetchDeviceStatus.fulfilled, (state, action) => {\n        const { id, status } = action.payload;\n        const deviceIndex = state.devices.findIndex(device => device.id === id);\n        if (deviceIndex !== -1) {\n          state.devices[deviceIndex].status = status;\n        }\n      })\n      .addCase(fetchDeviceStatus.rejected, (state, action) => {\n        state.error = action.payload || '获取设备状态失败';\n      })\n      \n      // 控制设备\n      .addCase(controlDevice.pending, (state, action) => {\n        const { deviceId } = action.meta.arg;\n        state.controlStatus[deviceId] = 'pending';\n      })\n      .addCase(controlDevice.fulfilled, (state, action) => {\n        const { id } = action.payload;\n        state.controlStatus[id] = 'success';\n        // 更新设备状态\n        const deviceIndex = state.devices.findIndex(device => device.id === id);\n        if (deviceIndex !== -1) {\n          // 假设控制成功后，设备状态会相应变化\n          // 实际应用中可能需要重新获取设备状态\n        }\n      })\n      .addCase(controlDevice.rejected, (state, action) => {\n        const { deviceId } = action.meta.arg;\n        state.controlStatus[deviceId] = 'failed';\n        state.error = action.payload || '设备控制操作失败';\n      });\n  }\n});\n\nexport const { clearDeviceError } = deviceSlice.actions;\nexport default deviceSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}