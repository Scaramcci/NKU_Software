{"ast":null,"code":"/**\n * 水质数据服务\n * 处理水质数据的加载和处理\n */\n\nimport axios from 'axios';\nimport { parseCsvData } from './dataService';\n\n// 基础路径配置\nconst DATA_BASE_PATH = '/软件工程大作业数据';\n\n/**\n * 加载指定监测点的水质数据\n * @param {string} province - 省份，如 '贵州省'\n * @param {string} basin - 流域，如 '长江流域'\n * @param {string} station - 监测点名称，如 '鱼塘大桥'\n * @param {string} year - 年份，如 '2021'\n * @param {string} month - 月份，如 '04'\n * @returns {Promise} - 返回水质数据\n */\nexport const loadStationWaterQualityData = async (province, basin, station, year, month) => {\n  try {\n    const response = await axios.get(`${DATA_BASE_PATH}/水质数据/water_quality_by_name/${province}/${basin}/${station}/${year}-${month}/${station}.csv`, {\n      responseType: 'text'\n    });\n    return processWaterQualityData(parseCsvData(response.data));\n  } catch (error) {\n    console.error('加载监测点水质数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 处理水质CSV数据，转换为适合图表展示的格式\n * @param {Array} csvData - CSV解析后的数据数组\n * @returns {Object} - 处理后的水质数据\n */\nconst processWaterQualityData = csvData => {\n  if (!csvData || !Array.isArray(csvData) || csvData.length === 0) {\n    return null;\n  }\n\n  // 提取监测时间作为日期数组\n  const days = csvData.map(item => item['监测时间'].split(' ')[0]);\n\n  // 提取各项水质参数\n  const temperature = csvData.map(item => parseFloat(item['水温(℃)']) || null);\n  const ph = csvData.map(item => parseFloat(item['pH(无量纲)']) || null);\n  const oxygen = csvData.map(item => parseFloat(item['溶解氧(mg/L)']) || null);\n  const conductivity = csvData.map(item => parseFloat(item['电导率(μS/cm)']) || null);\n  const turbidity = csvData.map(item => parseFloat(item['浊度(NTU)']) || null);\n  const permanganate = csvData.map(item => {\n    const value = item['高锰酸盐指数(mg/L)'];\n    return value === '--' ? null : parseFloat(value) || null;\n  });\n  const ammonia = csvData.map(item => parseFloat(item['氨氮(mg/L)']) || null);\n  const phosphorus = csvData.map(item => parseFloat(item['总磷(mg/L)']) || null);\n  const nitrogen = csvData.map(item => {\n    const value = item['总氮(mg/L)'];\n    return value === '--' ? null : parseFloat(value) || null;\n  });\n\n  // 提取水质类别\n  const waterQualityCategories = csvData.map(item => item['水质类别']);\n  return {\n    days,\n    temperature,\n    ph,\n    oxygen,\n    conductivity,\n    turbidity,\n    permanganate,\n    ammonia,\n    phosphorus,\n    nitrogen,\n    waterQualityCategories\n  };\n};\n\n/**\n * 获取可用的监测点列表\n * @returns {Promise} - 返回监测点列表\n */\nexport const getAvailableStations = async () => {\n  // 在实际项目中，这里应该是一个API调用\n  // 由于我们没有实际的API，这里返回硬编码的数据\n  return [{\n    province: '贵州省',\n    basin: '长江流域',\n    station: '鱼塘大桥'\n  }, {\n    province: '湖南省',\n    basin: '长江流域',\n    station: '鱼市'\n  }, {\n    province: '陕西省',\n    basin: '黄河流域',\n    station: '鱼河'\n  }];\n};\nexport default {\n  loadStationWaterQualityData,\n  getAvailableStations\n};","map":{"version":3,"names":["axios","parseCsvData","DATA_BASE_PATH","loadStationWaterQualityData","province","basin","station","year","month","response","get","responseType","processWaterQualityData","data","error","console","csvData","Array","isArray","length","days","map","item","split","temperature","parseFloat","ph","oxygen","conductivity","turbidity","permanganate","value","ammonia","phosphorus","nitrogen","waterQualityCategories","getAvailableStations"],"sources":["D:/文雅竹/作业/大三下/软件工程/NKU_Software-main2/NKU_Software-main/frontend/src/services/waterQualityService.js"],"sourcesContent":["/**\n * 水质数据服务\n * 处理水质数据的加载和处理\n */\n\nimport axios from 'axios';\nimport { parseCsvData } from './dataService';\n\n// 基础路径配置\nconst DATA_BASE_PATH = '/软件工程大作业数据';\n\n/**\n * 加载指定监测点的水质数据\n * @param {string} province - 省份，如 '贵州省'\n * @param {string} basin - 流域，如 '长江流域'\n * @param {string} station - 监测点名称，如 '鱼塘大桥'\n * @param {string} year - 年份，如 '2021'\n * @param {string} month - 月份，如 '04'\n * @returns {Promise} - 返回水质数据\n */\nexport const loadStationWaterQualityData = async (province, basin, station, year, month) => {\n  try {\n    const response = await axios.get(\n      `${DATA_BASE_PATH}/水质数据/water_quality_by_name/${province}/${basin}/${station}/${year}-${month}/${station}.csv`, \n      { responseType: 'text' }\n    );\n    return processWaterQualityData(parseCsvData(response.data));\n  } catch (error) {\n    console.error('加载监测点水质数据失败:', error);\n    return null;\n  }\n};\n\n/**\n * 处理水质CSV数据，转换为适合图表展示的格式\n * @param {Array} csvData - CSV解析后的数据数组\n * @returns {Object} - 处理后的水质数据\n */\nconst processWaterQualityData = (csvData) => {\n  if (!csvData || !Array.isArray(csvData) || csvData.length === 0) {\n    return null;\n  }\n  \n  // 提取监测时间作为日期数组\n  const days = csvData.map(item => item['监测时间'].split(' ')[0]);\n  \n  // 提取各项水质参数\n  const temperature = csvData.map(item => parseFloat(item['水温(℃)']) || null);\n  const ph = csvData.map(item => parseFloat(item['pH(无量纲)']) || null);\n  const oxygen = csvData.map(item => parseFloat(item['溶解氧(mg/L)']) || null);\n  const conductivity = csvData.map(item => parseFloat(item['电导率(μS/cm)']) || null);\n  const turbidity = csvData.map(item => parseFloat(item['浊度(NTU)']) || null);\n  const permanganate = csvData.map(item => {\n    const value = item['高锰酸盐指数(mg/L)'];\n    return value === '--' ? null : parseFloat(value) || null;\n  });\n  const ammonia = csvData.map(item => parseFloat(item['氨氮(mg/L)']) || null);\n  const phosphorus = csvData.map(item => parseFloat(item['总磷(mg/L)']) || null);\n  const nitrogen = csvData.map(item => {\n    const value = item['总氮(mg/L)'];\n    return value === '--' ? null : parseFloat(value) || null;\n  });\n  \n  // 提取水质类别\n  const waterQualityCategories = csvData.map(item => item['水质类别']);\n  \n  return {\n    days,\n    temperature,\n    ph,\n    oxygen,\n    conductivity,\n    turbidity,\n    permanganate,\n    ammonia,\n    phosphorus,\n    nitrogen,\n    waterQualityCategories\n  };\n};\n\n/**\n * 获取可用的监测点列表\n * @returns {Promise} - 返回监测点列表\n */\nexport const getAvailableStations = async () => {\n  // 在实际项目中，这里应该是一个API调用\n  // 由于我们没有实际的API，这里返回硬编码的数据\n  return [\n    { province: '贵州省', basin: '长江流域', station: '鱼塘大桥' },\n    { province: '湖南省', basin: '长江流域', station: '鱼市' },\n    { province: '陕西省', basin: '黄河流域', station: '鱼河' }\n  ];\n};\n\nexport default {\n  loadStationWaterQualityData,\n  getAvailableStations\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}