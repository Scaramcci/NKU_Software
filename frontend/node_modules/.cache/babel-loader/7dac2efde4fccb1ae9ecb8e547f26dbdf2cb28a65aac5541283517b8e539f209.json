{"ast":null,"code":"import api from './api';\n\n// 模拟设备数据\nconst mockDevices = [{\n  id: 1,\n  name: '水泵A-01',\n  type: 'pump',\n  farmName: '南湖养殖场',\n  status: 'online',\n  powerStatus: 'on',\n  lastUpdated: '2023-05-15 08:30:22'\n}, {\n  id: 2,\n  name: '增氧机B-02',\n  type: 'aerator',\n  farmName: '南湖养殖场',\n  status: 'online',\n  powerStatus: 'on',\n  lastUpdated: '2023-05-15 09:15:43'\n}, {\n  id: 3,\n  name: '投饵机C-03',\n  type: 'feeder',\n  farmName: '东湖养殖场',\n  status: 'offline',\n  powerStatus: 'off',\n  lastUpdated: '2023-05-14 18:22:10'\n}, {\n  id: 4,\n  name: '水质传感器D-04',\n  type: 'sensor',\n  farmName: '东湖养殖场',\n  status: 'warning',\n  powerStatus: 'on',\n  lastUpdated: '2023-05-15 10:05:37'\n}, {\n  id: 5,\n  name: '监控摄像头E-05',\n  type: 'camera',\n  farmName: '西湖养殖场',\n  status: 'online',\n  powerStatus: 'on',\n  lastUpdated: '2023-05-15 07:45:19'\n}];\nconst deviceService = {\n  // 获取设备列表\n  getDevices: () => {\n    // 模拟API响应\n    return Promise.resolve({\n      data: mockDevices\n    });\n  },\n  // 获取设备状态\n  getDeviceStatus: deviceId => {\n    const device = mockDevices.find(d => d.id === parseInt(deviceId));\n    // 模拟API响应\n    return Promise.resolve({\n      data: device ? device.status : 'unknown'\n    });\n  },\n  // 控制设备\n  controlDevice: (deviceId, action) => {\n    const device = mockDevices.find(d => d.id === parseInt(deviceId));\n    if (device) {\n      // 根据操作更新设备状态\n      switch (action) {\n        case 'powerOn':\n          device.powerStatus = 'on';\n          break;\n        case 'powerOff':\n          device.powerStatus = 'off';\n          break;\n        // 其他操作...\n      }\n    }\n    // 模拟API响应\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: '操作成功'\n      }\n    });\n  }\n};\nexport default deviceService;","map":{"version":3,"names":["api","mockDevices","id","name","type","farmName","status","powerStatus","lastUpdated","deviceService","getDevices","Promise","resolve","data","getDeviceStatus","deviceId","device","find","d","parseInt","controlDevice","action","success","message"],"sources":["D:/文雅竹/作业/大三下/软件工程/NKU_Software-main2/NKU_Software-main/frontend/src/services/deviceService.js"],"sourcesContent":["import api from './api';\n\n// 模拟设备数据\nconst mockDevices = [\n  {\n    id: 1,\n    name: '水泵A-01',\n    type: 'pump',\n    farmName: '南湖养殖场',\n    status: 'online',\n    powerStatus: 'on',\n    lastUpdated: '2023-05-15 08:30:22'\n  },\n  {\n    id: 2,\n    name: '增氧机B-02',\n    type: 'aerator',\n    farmName: '南湖养殖场',\n    status: 'online',\n    powerStatus: 'on',\n    lastUpdated: '2023-05-15 09:15:43'\n  },\n  {\n    id: 3,\n    name: '投饵机C-03',\n    type: 'feeder',\n    farmName: '东湖养殖场',\n    status: 'offline',\n    powerStatus: 'off',\n    lastUpdated: '2023-05-14 18:22:10'\n  },\n  {\n    id: 4,\n    name: '水质传感器D-04',\n    type: 'sensor',\n    farmName: '东湖养殖场',\n    status: 'warning',\n    powerStatus: 'on',\n    lastUpdated: '2023-05-15 10:05:37'\n  },\n  {\n    id: 5,\n    name: '监控摄像头E-05',\n    type: 'camera',\n    farmName: '西湖养殖场',\n    status: 'online',\n    powerStatus: 'on',\n    lastUpdated: '2023-05-15 07:45:19'\n  }\n];\n\nconst deviceService = {\n  // 获取设备列表\n  getDevices: () => {\n    // 模拟API响应\n    return Promise.resolve({ data: mockDevices });\n  },\n  \n  // 获取设备状态\n  getDeviceStatus: (deviceId) => {\n    const device = mockDevices.find(d => d.id === parseInt(deviceId));\n    // 模拟API响应\n    return Promise.resolve({ data: device ? device.status : 'unknown' });\n  },\n  \n  // 控制设备\n  controlDevice: (deviceId, action) => {\n    const device = mockDevices.find(d => d.id === parseInt(deviceId));\n    if (device) {\n      // 根据操作更新设备状态\n      switch(action) {\n        case 'powerOn':\n          device.powerStatus = 'on';\n          break;\n        case 'powerOff':\n          device.powerStatus = 'off';\n          break;\n        // 其他操作...\n      }\n    }\n    // 模拟API响应\n    return Promise.resolve({ data: { success: true, message: '操作成功' } });\n  }\n};\n\nexport default deviceService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,WAAW,GAAG,CAClB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,QAAQ;EAChBC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE;AACf,CAAC,EACD;EACEN,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,QAAQ;EAChBC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE;AACf,CAAC,EACD;EACEN,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,SAAS;EACjBC,WAAW,EAAE,KAAK;EAClBC,WAAW,EAAE;AACf,CAAC,EACD;EACEN,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,SAAS;EACjBC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE;AACf,CAAC,EACD;EACEN,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,OAAO;EACjBC,MAAM,EAAE,QAAQ;EAChBC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE;AACf,CAAC,CACF;AAED,MAAMC,aAAa,GAAG;EACpB;EACAC,UAAU,EAAEA,CAAA,KAAM;IAChB;IACA,OAAOC,OAAO,CAACC,OAAO,CAAC;MAAEC,IAAI,EAAEZ;IAAY,CAAC,CAAC;EAC/C,CAAC;EAED;EACAa,eAAe,EAAGC,QAAQ,IAAK;IAC7B,MAAMC,MAAM,GAAGf,WAAW,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,EAAE,KAAKiB,QAAQ,CAACJ,QAAQ,CAAC,CAAC;IACjE;IACA,OAAOJ,OAAO,CAACC,OAAO,CAAC;MAAEC,IAAI,EAAEG,MAAM,GAAGA,MAAM,CAACV,MAAM,GAAG;IAAU,CAAC,CAAC;EACtE,CAAC;EAED;EACAc,aAAa,EAAEA,CAACL,QAAQ,EAAEM,MAAM,KAAK;IACnC,MAAML,MAAM,GAAGf,WAAW,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,EAAE,KAAKiB,QAAQ,CAACJ,QAAQ,CAAC,CAAC;IACjE,IAAIC,MAAM,EAAE;MACV;MACA,QAAOK,MAAM;QACX,KAAK,SAAS;UACZL,MAAM,CAACT,WAAW,GAAG,IAAI;UACzB;QACF,KAAK,UAAU;UACbS,MAAM,CAACT,WAAW,GAAG,KAAK;UAC1B;QACF;MACF;IACF;IACA;IACA,OAAOI,OAAO,CAACC,OAAO,CAAC;MAAEC,IAAI,EAAE;QAAES,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAO;IAAE,CAAC,CAAC;EACtE;AACF,CAAC;AAED,eAAed,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}