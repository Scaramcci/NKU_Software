{"ast":null,"code":"import api from './api';\n//用户登录界面\n// 用户角色常量\nexport const USER_ROLES = {\n  USER: 'user',\n  // 普通用户\n  FARMER: 'farmer',\n  // 养殖户\n  ADMIN: 'admin' // 管理员\n};\n\n// 登录服务\nexport const login = async credentials => {\n  try {\n    // 实际项目中应该调用后端API\n    // return await api.post('/auth/login', credentials);\n\n    // 模拟API调用\n    const usersData = JSON.parse(localStorage.getItem('users') || '[]');\n    const user = usersData.find(u => u.username === credentials.username && u.password === credentials.password && u.role === credentials.role // 👈 新增对比角色身份\n    );\n    if (!user) {\n      throw new Error('用户名或密码错误');\n    }\n\n    // 创建包含用户角色的响应\n    const response = {\n      user: {\n        id: user.id || Date.now(),\n        username: user.username,\n        email: user.email,\n        role: user.role || USER_ROLES.USER,\n        // 默认为普通用户\n        displayName: user.displayName || user.username\n      },\n      token: `jwt_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`\n    };\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 注册服务\nexport const register = async userData => {\n  try {\n    // 实际项目中应该调用后端API\n    // return await api.post('/auth/register', userData);\n\n    // 模拟API调用\n    const usersData = JSON.parse(localStorage.getItem('users') || '[]');\n\n    // 检查用户名是否已存在\n    if (usersData.some(user => user.username === userData.username)) {\n      throw new Error('用户名已存在');\n    }\n\n    // 创建新用户，默认为普通用户角色\n    const newUser = {\n      id: Date.now(),\n      username: userData.username,\n      password: userData.password,\n      email: userData.email,\n      role: userData.role || USER_ROLES.USER,\n      displayName: userData.displayName || userData.username,\n      createdAt: new Date().toISOString()\n    };\n\n    // 保存到本地存储\n    usersData.push(newUser);\n    localStorage.setItem('users', JSON.stringify(usersData));\n\n    // 创建响应\n    const response = {\n      user: {\n        id: newUser.id,\n        username: newUser.username,\n        email: newUser.email,\n        role: newUser.role,\n        displayName: newUser.displayName\n      },\n      token: `jwt_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`\n    };\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 获取当前用户信息\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('currentUser');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\n// 检查用户是否有特定角色\nexport const hasRole = (user, role) => {\n  if (!user) return false;\n  return user.role === role;\n};\n\n// 检查用户是否有权限访问\nexport const checkPermission = (user, requiredRoles) => {\n  if (!user) return false;\n  if (!requiredRoles || requiredRoles.length === 0) return true;\n  return requiredRoles.includes(user.role);\n};\n\n// 退出登录\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('currentUser');\n};","map":{"version":3,"names":["api","USER_ROLES","USER","FARMER","ADMIN","login","credentials","usersData","JSON","parse","localStorage","getItem","user","find","u","username","password","role","Error","response","id","Date","now","email","displayName","token","Math","random","toString","substring","error","register","userData","some","newUser","createdAt","toISOString","push","setItem","stringify","getCurrentUser","userStr","hasRole","checkPermission","requiredRoles","length","includes","logout","removeItem"],"sources":["D:/文雅竹/作业/大三下/软件工程/NKU_Software-main2/NKU_Software-main/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\n//用户登录界面\n// 用户角色常量\nexport const USER_ROLES = {\n  USER: 'user',         // 普通用户\n  FARMER: 'farmer',     // 养殖户\n  ADMIN: 'admin'        // 管理员\n};\n\n// 登录服务\nexport const login = async (credentials) => {\n  try {\n    // 实际项目中应该调用后端API\n    // return await api.post('/auth/login', credentials);\n    \n    // 模拟API调用\n    const usersData = JSON.parse(localStorage.getItem('users') || '[]');\nconst user = usersData.find(u =>\n  u.username === credentials.username &&\n  u.password === credentials.password &&\n  u.role === credentials.role // 👈 新增对比角色身份\n);\n\n    \n    if (!user) {\n      throw new Error('用户名或密码错误');\n    }\n    \n    // 创建包含用户角色的响应\n    const response = {\n      user: {\n        id: user.id || Date.now(),\n        username: user.username,\n        email: user.email,\n        role: user.role || USER_ROLES.USER, // 默认为普通用户\n        displayName: user.displayName || user.username\n      },\n      token: `jwt_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`\n    };\n    \n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 注册服务\nexport const register = async (userData) => {\n  try {\n    // 实际项目中应该调用后端API\n    // return await api.post('/auth/register', userData);\n    \n    // 模拟API调用\n    const usersData = JSON.parse(localStorage.getItem('users') || '[]');\n    \n    // 检查用户名是否已存在\n    if (usersData.some(user => user.username === userData.username)) {\n      throw new Error('用户名已存在');\n    }\n    \n    // 创建新用户，默认为普通用户角色\n    const newUser = {\n      id: Date.now(),\n      username: userData.username,\n      password: userData.password,\n      email: userData.email,\n      role: userData.role || USER_ROLES.USER,\n      displayName: userData.displayName || userData.username,\n      createdAt: new Date().toISOString()\n    };\n    \n    // 保存到本地存储\n    usersData.push(newUser);\n    localStorage.setItem('users', JSON.stringify(usersData));\n    \n    // 创建响应\n    const response = {\n      user: {\n        id: newUser.id,\n        username: newUser.username,\n        email: newUser.email,\n        role: newUser.role,\n        displayName: newUser.displayName\n      },\n      token: `jwt_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`\n    };\n    \n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 获取当前用户信息\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('currentUser');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\n// 检查用户是否有特定角色\nexport const hasRole = (user, role) => {\n  if (!user) return false;\n  return user.role === role;\n};\n\n// 检查用户是否有权限访问\nexport const checkPermission = (user, requiredRoles) => {\n  if (!user) return false;\n  if (!requiredRoles || requiredRoles.length === 0) return true;\n  return requiredRoles.includes(user.role);\n};\n\n// 退出登录\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('currentUser');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}